{"version":3,"file":"nacci.cjs","sources":["../../src/error/dimensionError.ts","../../src/error/integerError.ts","../../src/error/outOfBoundsError.ts","../../src/globals.ts","../../src/error/unsafeError.ts","../../src/utils/is.ts","../../src/utils/try.ts","../../src/utils/powers.ts","../../src/kbonacci/gen/kPowerGen.ts","../../src/kbonacci/gen/powerGen.ts","../../src/utils/array.ts","../../src/kbonacci/gen/slidingWindowGen.ts","../../src/utils/matrix.ts","../../src/kbonacci/encoding/encoding.ts","../../src/kbonacci/encoding/matrix/matrixEncoding.ts","../../src/kbonacci/encoding/revSum/revSumEncoding.ts","../../src/kbonacci/encoding/sum/sumEncoding.ts","../../src/kbonacci/encoding/term/termEncoding.ts","../../src/ops/bigOps.ts","../../src/ops/numOps.ts","../../src/ops/safeNumOps.ts","../../src/kbonacci/wrapper/bigKbonacci.ts","../../src/kbonacci/wrapper/bigFibonacci.ts","../../src/kbonacci/wrapper/bigTribonacci.ts","../../src/kbonacci/wrapper/kbonacci.ts","../../src/kbonacci/wrapper/fibonacci.ts","../../src/kbonacci/wrapper/tribonacci.ts"],"sourcesContent":["export class DimensionError extends RangeError {\n  constructor(\n    actual: number | number[],\n    expected: number | number[],\n    relation = \"!=\"\n  ) {\n    const a = Array.isArray(actual) ? actual.join(\"x\") : `${actual}`;\n    const b = Array.isArray(expected) ? expected.join(\"x\") : `${expected}`;\n    super(`Dimension mismatch. ${a} ${relation} ${b}`);\n  }\n}\n","export class IntegerError extends TypeError {\n  constructor(value: unknown, label = \"Value\") {\n    super(`Not an integer. ${label}: ${String(value)}`);\n  }\n}\n","export class OutOfBoundsError extends RangeError {\n  constructor(\n    actual: unknown,\n    min?: unknown,\n    max?: unknown,\n    label = \"index\",\n    msg = \"Out of bounds\"\n  ) {\n    const message = [msg];\n    if (min != null || max != null) {\n      message.push(`. Expected`);\n      if (min != null) {\n        message.push(` ${String(min)} <=`);\n      }\n      message.push(` ${label}`);\n      if (max != null) {\n        message.push(` <= ${String(max)}`);\n      }\n    }\n    message.push(`. ${label}: ${String(actual)}`);\n    super(message.join(\"\"));\n  }\n}\n","export const K_MIN = 2;\nexport const SAFE_MAX = Number.MAX_SAFE_INTEGER;\nexport const SAFE_MIN = Number.MIN_SAFE_INTEGER;\n","import { SAFE_MAX, SAFE_MIN } from \"../globals\";\nimport { OutOfBoundsError } from \"./outOfBoundsError\";\n\nexport class UnsafeError extends OutOfBoundsError {\n  constructor(actual: number) {\n    super(actual, SAFE_MIN, SAFE_MAX, \"value\", \"Unsafe value\");\n  }\n}\n","import { SAFE_MIN, SAFE_MAX } from \"../globals\";\n\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\nexport function isInteger(value: unknown): value is number {\n  return Number.isInteger(value);\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\nexport function isSafeNumber(value: number): boolean {\n  return value >= SAFE_MIN && value <= SAFE_MAX;\n}\n\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","import { DimensionError } from \"../error/dimensionError\";\nimport { IntegerError } from \"../error/integerError\";\nimport { OutOfBoundsError } from \"../error/outOfBoundsError\";\nimport { UnsafeError } from \"../error/unsafeError\";\nimport { K_MIN } from \"../globals\";\nimport { isInteger, isSafeNumber } from \"./is\";\n\nexport function tryInteger<T>(n: T): T {\n  if (!isInteger(n)) {\n    throw new IntegerError(n);\n  }\n  return n;\n}\n\nexport function tryK(K: number): number {\n  if (!isInteger(K)) {\n    throw new IntegerError(K, \"K\");\n  }\n  if (K < K_MIN) {\n    throw new OutOfBoundsError(K, K_MIN, undefined, \"K\");\n  }\n  return K;\n}\n\nexport function tryNumTerms<T>(maxLen: number, terms: T[]): T[] {\n  if (terms.length > maxLen) {\n    throw new DimensionError(terms.length, maxLen, \"<=\");\n  }\n  return terms;\n}\n\nexport function trySafe(n: number): number {\n  if (!isSafeNumber(n)) {\n    throw new UnsafeError(n);\n  }\n  return n;\n}\n","import { OutOfBoundsError } from \"../error/outOfBoundsError\";\nexport interface KeyOps<T> {\n  cast(value: unknown): T;\n  equal(a: T, b: T): boolean;\n  half(a: T): T;\n  isOdd(a: T): boolean;\n  sign(a: T): number;\n  trunc(a: T): T;\n}\n\nexport interface ValueOps<T> {\n  times(a: T, b: T): T;\n  square(a: T): T;\n}\n\nexport class Powers<K, V> {\n  protected cached: boolean;\n  protected keyOps: KeyOps<K>;\n  protected valOps: ValueOps<V>;\n  protected pows: V[];\n\n  constructor(value: V, keyOps: KeyOps<K>, valOps: ValueOps<V>, cached = true) {\n    this.cached = cached;\n    this.keyOps = keyOps;\n    this.pows = [value];\n    this.valOps = valOps;\n  }\n\n  get size(): number {\n    return this.pows.length;\n  }\n\n  clear(): void {\n    this.pows.length = 1;\n  }\n\n  get(N: K): V {\n    const keyOps = this.keyOps;\n    const valOps = this.valOps;\n\n    const pows = this.cached ? this.pows : [this.pows[0]];\n    let value: V | undefined = undefined;\n\n    for (let i = 0; keyOps.sign(N) > 0; ++i) {\n      if (pows[i] == null) {\n        pows[i] = valOps.square(pows[i - 1]);\n      }\n      if (keyOps.isOdd(N)) {\n        if (value == null) {\n          value = pows[i];\n        } else {\n          value = valOps.times(value, pows[i]);\n        }\n      }\n      N = keyOps.trunc(keyOps.half(N));\n    }\n\n    if (value == null) {\n      throw new OutOfBoundsError(N, keyOps.cast(1));\n    }\n\n    return value;\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  setCached(cached: boolean): void {\n    this.cached = cached;\n    if (!cached) {\n      this.clear();\n    }\n  }\n\n  setValue(value: V): void {\n    if (value !== this.pows[0]) {\n      this.pows = [value];\n      this.clear();\n    }\n  }\n}\n","import { Generator } from \"./generator\";\nimport { Ops } from \"../../ops/ops\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Powers } from \"../../utils/powers\";\nimport { Encoding } from \"../encoding/encoding\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class KPowerGen<K, V> implements Generator<K, V> {\n  private cached: boolean;\n  private customs: V[];\n  private encoding: Encoding<V, unknown>;\n  private indexOps: Ops<K>;\n  private isStd: boolean;\n  private _K: number;\n  private neg: Powers<K, unknown>;\n  private pos: Powers<K, unknown>;\n  private v0: V;\n  private zero: unknown;\n\n  constructor(K: number, config: GenConfig<K, V, unknown>) {\n    tryK(K);\n\n    const cached = config.cached ?? true;\n    const customs = config.customs ?? [];\n    const encoding = config.encoding;\n    const indexOps = config.indexOps ?? config.ops;\n    if (encoding == null) {\n      throw new TypeError(`Missing encoding`);\n    }\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n\n    this.cached = cached;\n    this.customs = customs;\n    this.encoding = encoding;\n    this.indexOps = indexOps;\n    this.isStd = false;\n    this._K = K;\n    this.neg = new Powers(encoding.genNegK(K), indexOps, encoding, cached);\n    this.pos = new Powers(encoding.genK(K), indexOps, encoding, cached);\n    this.zero = encoding.genZero(K);\n    this.v0 = encoding.toValue(this.zero, 0);\n    this.setCustoms(customs);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    const iOps = this.indexOps;\n\n    const T = iOps.cast(this.customs.length - 1);\n    if (iOps.sign(N) >= 0 && iOps.smallerEq(N, T)) {\n      return this.customs[iOps.toNumber(N)];\n    }\n\n    let data: unknown;\n    let delta: K;\n\n    N = iOps.minus(N, T);\n    const K = iOps.cast(this.K);\n    if (iOps.sign(N) > 0) {\n      const mod = iOps.mod(iOps.minus1(N), K);\n      delta = iOps.minus1(K);\n      N = iOps.trunc(iOps.dividedBy(N, K));\n      N = iOps.equal(mod, delta) ? N : iOps.plus1(N);\n      delta = iOps.plus(iOps.negative(delta), mod);\n      data = this.pos.get(N);\n    } else if (iOps.larger(N, iOps.negative(K))) {\n      delta = N;\n      data = this.zero;\n    } else {\n      delta = iOps.mod(N, K);\n      N = iOps.negative(N);\n      N = iOps.trunc(iOps.dividedBy(N, K));\n      data = this.neg.get(N);\n    }\n\n    const customs = this.isStd ? undefined : this.customs;\n    return this.encoding.toValue(data, iOps.toNumber(delta), customs);\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  getCustoms(): V[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.cached = value;\n    this.neg.setCached(value);\n    this.pos.setCached(value);\n  }\n\n  setCustoms(customs?: V[]): void {\n    if (customs == null || customs.length < 1) {\n      this.isStd = true;\n      this.customs = [this.v0];\n    } else {\n      tryNumTerms(this.K, customs);\n      this.isStd = false;\n      this.customs = customs;\n    }\n  }\n}\n","import { Ops } from \"../../ops/ops\";\nimport { Generator } from \"./generator\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Powers } from \"../../utils/powers\";\nimport { Encoding } from \"../encoding/encoding\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class PowerGen<K, V> implements Generator<K, V> {\n  private cached: boolean;\n  private customs: V[];\n  private encoding: Encoding<V, unknown>;\n  private indexOps: Ops<K>;\n  private isStd: boolean;\n  private _K: number;\n  private neg: Powers<K, unknown>;\n  private pos: Powers<K, unknown>;\n  private v0: V;\n\n  constructor(K: number, config: GenConfig<K, V, unknown>) {\n    tryK(K);\n\n    const cached = config.cached ?? true;\n    const customs = config.customs ?? [];\n    const encoding = config.encoding;\n    const indexOps = config.indexOps ?? config.ops;\n    if (encoding == null) {\n      throw new TypeError(`Missing encoding`);\n    }\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n\n    this.cached = cached;\n    this.customs = [];\n    this.encoding = encoding;\n    this.indexOps = indexOps;\n    this.isStd = false;\n    this._K = K;\n    this.neg = new Powers(encoding.genNegOne(K), indexOps, encoding, cached);\n    const one = encoding.genOne(K);\n    this.pos = new Powers(one, indexOps, encoding, cached);\n    this.v0 = encoding.toValue(one, -1);\n    this.setCustoms(customs);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    const iOps = this.indexOps;\n\n    const T = iOps.cast(this.customs.length - 1);\n    if (iOps.sign(N) >= 0 && iOps.smallerEq(N, T)) {\n      return this.customs[iOps.toNumber(N)];\n    }\n\n    N = iOps.minus(N, T);\n    const data =\n      iOps.sign(N) > 0 ? this.pos.get(N) : this.neg.get(iOps.negative(N));\n\n    const customs = this.isStd ? undefined : this.customs;\n    return this.encoding.toValue(data, 0, customs);\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  getCustoms(): V[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.cached = value;\n    this.neg.setCached(value);\n    this.pos.setCached(value);\n  }\n\n  setCustoms(customs?: V[]): void {\n    if (customs == null || customs.length < 1) {\n      this.isStd = true;\n      this.customs = [this.v0];\n    } else {\n      tryNumTerms(this.K, customs);\n      this.isStd = false;\n      this.customs = customs;\n    }\n  }\n}\n","import { Ops } from \"../ops/ops\";\n\nexport function castArray<T>(array: unknown[], ops: Ops<T>): T[] {\n  const N = array.length;\n  const out = new Array<T>(N);\n  for (let i = 0; i < N; ++i) {\n    out[i] = ops.cast(array[i]);\n  }\n  return out;\n}\n\nexport function copy<T>(\n  A: T[],\n  B: T[],\n  target = 0,\n  start = 0,\n  end = A.length\n): T[] {\n  if (A === B) {\n    return A.copyWithin(target, start, end);\n  }\n  if (target < 0) {\n    target = Math.max(0, B.length + target);\n  }\n  if (start < 0) {\n    start = Math.max(0, A.length + start);\n  }\n  if (end < 0) {\n    end = Math.max(0, A.length + end);\n  }\n  end = start + Math.max(0, Math.min(B.length - target, end - start));\n  while (start < end) {\n    B[target++] = A[start++];\n  }\n  return B;\n}\n\nexport function getSum<T>(arr: T[], ops: Ops<T>): T | undefined {\n  const N = arr.length;\n  if (N < 1) {\n    return undefined;\n  }\n  let value = arr[0];\n  for (let i = 1; i < N; ++i) {\n    value = ops.plus(value, arr[i]);\n  }\n  return value;\n}\n\nexport function padStart<T>(\n  array: T[],\n  targetLength: number,\n  padValue: T\n): void {\n  if (targetLength <= array.length) {\n    return;\n  }\n  const N = array.length;\n  const i = targetLength - N;\n  array.length = targetLength;\n  array.fill(padValue, N, i);\n  array.copyWithin(i, 0, N);\n  array.fill(padValue, 0, Math.min(i, N));\n}\n","import { padStart } from \"../../utils/array\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Generator } from \"./generator\";\nimport { Ops } from \"../../ops/ops\";\nimport { getSum } from \"../../utils/array\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class SlidingWindowGen<K, V> implements Generator<K, V> {\n  private delta: number;\n  private indexOps: Ops<K>;\n  private _K: number;\n  private minN: K;\n  private next: V;\n  private valueOps: Ops<V>;\n  private values: V[];\n\n  constructor(K: number, config: GenConfig<K, V, never>) {\n    tryK(K);\n\n    let customs = config.customs ?? [];\n    const indexOps = config.indexOps ?? config.ops;\n    const valueOps = config.valueOps ?? config.ops;\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n    if (valueOps == null) {\n      throw new TypeError(`Missing value operations`);\n    }\n\n    const _0 = valueOps.cast(0);\n    if (customs == null || customs.length < 1) {\n      const _1 = valueOps.cast(1);\n      customs = [_0, _1];\n    } else {\n      tryNumTerms(K, customs);\n    }\n\n    // Initialize properties\n    this.delta = 0;\n    this.indexOps = indexOps;\n    this._K = K;\n    this.valueOps = valueOps;\n    this.minN = indexOps.minus(indexOps.cast(customs.length), indexOps.cast(K));\n    this.next = getSum(customs, valueOps) ?? _0;\n    this.values = Array.from(customs);\n    padStart(this.values, K, _0);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    // Shift window\n    const ops = this.indexOps;\n    if (ops.smaller(N, this.minN)) {\n      this.reverse(ops.minus(this.minN, N));\n    } else {\n      const maxN = ops.plus(this.minN, ops.cast(this.K));\n      if (ops.largerEq(N, maxN)) {\n        this.forward(ops.plus1(ops.minus(N, maxN)));\n      }\n    }\n\n    // Return value\n    const i = ops.plus(ops.minus(N, this.minN), ops.cast(this.delta));\n    return this.values[ops.toNumber(i) % this.K];\n  }\n\n  private forward(i: K): void {\n    const iOps = this.indexOps;\n    const vOps = this.valueOps;\n\n    while (iOps.sign(i) > 0) {\n      const temp = this.values[this.delta];\n      this.values[this.delta] = this.next;\n      this.next = vOps.plus(this.next, vOps.minus(this.next, temp));\n      this.delta = (this.delta + 1) % this.K;\n      this.minN = iOps.plus1(this.minN);\n      i = iOps.minus1(i);\n    }\n  }\n\n  private reverse(i: K): void {\n    const iOps = this.indexOps;\n    const vOps = this.valueOps;\n\n    while (iOps.sign(i) > 0) {\n      const delta = (this.delta - 1 + this.K) % this.K;\n      const value = this.values[delta];\n      const newValue = vOps.plus(vOps.minus(value, this.next), value);\n      this.minN = iOps.minus1(this.minN);\n      this.next = value;\n      this.delta = delta;\n      this.values[delta] = newValue;\n      i = iOps.minus1(i);\n    }\n  }\n}\n","import { DimensionError } from \"../error/dimensionError\";\nimport { Ops } from \"../ops/ops\";\nimport { Matrix } from \"../type/matrix\";\n\nexport function castMatrix<T>(mat: Matrix<unknown>, ops: Ops<T>): Matrix<T> {\n  const Y = mat.length;\n  const X = mat[0]?.length ?? 0;\n  const out = initMatrix<T>(Y, X);\n  for (let y = 0; y < Y; ++y) {\n    for (let x = 0; x < X; ++x) {\n      out[y][x] = ops.cast(mat[y][x]);\n    }\n  }\n  return out;\n}\n\nexport function fillMatrix<T>(matrix: Matrix<T>, value: T): void {\n  const M = matrix.length;\n  for (let m = 0; m < M; ++m) {\n    matrix[m].fill(value);\n  }\n}\n\nexport function initMatrix<T>(Y: number, X = Y): Matrix<T> {\n  const matrix = new Array<T[]>(Y);\n  for (let i = 0; i < Y; ++i) {\n    matrix[i] = new Array<T>(X);\n  }\n  return matrix;\n}\n\nexport function matrixMult<T>(\n  A: Matrix<T>,\n  B: Matrix<T>,\n  ops: Ops<T>,\n  zero: T = ops.cast(0)\n): Matrix<T> {\n  const M = A.length;\n  const N = A[0]?.length ?? 0;\n  const P = B[0]?.length ?? 0;\n  if (N !== B.length) {\n    throw new DimensionError([M, N], [B.length, P]);\n  }\n\n  const C = initMatrix<T>(M, P);\n  for (let m = 0; m < M; ++m) {\n    for (let p = 0; p < P; ++p) {\n      let val = zero;\n      for (let n = 0; n < N; ++n) {\n        const temp = ops.times(A[m][n], B[n][p]);\n        val = ops.plus(val, temp);\n      }\n      C[m][p] = val;\n    }\n  }\n\n  return C;\n}\n","export const EncodingFormat = {\n  Matrix: \"mat\",\n  RevSum: \"rsum\",\n  Sum: \"sum\",\n  Term: \"term\",\n} as const;\n\nexport interface Encoding<V, D = unknown> {\n  readonly format: string;\n  genK(K: number): D;\n  genNegK(K: number): D;\n  genNegOne(K: number): D;\n  genOne(K: number): D;\n  genZero(K: number): D;\n  pow(A: D, n: V): D;\n  shift(A: D, delta: number): D;\n  square(A: D): D;\n  times(A: D, B: D): D;\n  toValue(data: D, delta?: number, customTerms?: V[]): V;\n}\n","import { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { copy } from \"../../../utils/array\";\nimport { initMatrix, matrixMult } from \"../../../utils/matrix\";\nimport { Matrix } from \"../../../type/matrix\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\nimport { tryNumTerms } from \"../../../utils/try\";\n\n/*\nK = 4\n    2c-b   2b-a  a-b-c-d [      d     c       b         a] z  2z-d 4z-2d-c\n         2c+b-a    b-c-d [  a-b-c   c+d     b+c       a+b]\n                     c-d [    b-c   a-b   b+c+d     a+b+c]\n                       d [      c     b       a   a+b+c+d]\n\nK = 5\n    2d-c   2c-b     2b-a a-b-c-d-e [      e     d     c       b         a] z  2z-e 4z-2e-d 8z-4e-2d-c\n         2d+c-b   2c+b-a   b-c-d-e [a-b-c-d   d+e   c+d     b+c       a+b]\n                2d+c+b-a     c-d-e [  b-c-d a-b-c c+d+e   b+c+d     a+b+c]\n                               d-e [    c-d   b-c   a-b b+c+d+e   a+b+c+d]\n                                 e [      d     c     b       a a+b+c+d+e]\n*/\nexport class MatrixEncoding<T> implements Encoding<T, Matrix<T>> {\n  public readonly format = EncodingFormat.Matrix;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n\n    // Populate first row\n    let value = this._0;\n    const ops = this.ops;\n    matrix[0][0] = this._1;\n    for (let x = 1; x <= K; ++x) {\n      value = ops.plus(value, matrix[0][x - 1]);\n      matrix[0][x] = value;\n    }\n\n    // Populate subsequent rows\n    for (let y = 1; y <= K; ++y) {\n      matrix[y][0] = this._1;\n      for (let x = 1; x <= K; ++x) {\n        matrix[y][x] = ops.plus(matrix[y - 1][x - 1], matrix[0][x]);\n      }\n    }\n\n    return matrix;\n  }\n\n  genNegK(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    matrix[0][0] = this._2;\n    matrix[0].fill(this._0, 1, K);\n    matrix[0][K] = this._neg1;\n    for (let i = 1; i <= K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i - 1] = this._neg1;\n      matrix[i][i] = this._2;\n      matrix[i][K] = this._neg1;\n    }\n    matrix[K][K] = this._1;\n    return matrix;\n  }\n\n  genNegOne(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    for (let i = 0; i < K; ++i) {\n      matrix[i][0] = this._neg1;\n      matrix[i].fill(this._0, 1);\n      matrix[i][i + 1] = this._1;\n    }\n    matrix[K][0] = this._1;\n    matrix[K].fill(this._0, 1);\n    return matrix;\n  }\n\n  genOne(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    matrix[0].fill(this._0);\n    matrix[0][K] = this._1;\n    for (let i = 1; i <= K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i - 1] = this._1;\n      matrix[i][K] = this._1;\n    }\n    return matrix;\n  }\n\n  genZero(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    for (let i = 0; i < K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i] = this._1;\n    }\n    return matrix;\n  }\n\n  /*\n  get(A: Matrix<T>, y: number, x: number): T {\n    return A[y][x];\n  }\n  */\n\n  pow(A: Matrix<T>, n: T): Matrix<T> {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: Matrix<T> | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: Matrix<T>, delta: number): Matrix<T> {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    if (delta <= -K || delta > 0) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    delta = -delta;\n    const end = K - delta;\n    const matrix = initMatrix<T>(K);\n    for (let y = 0; y < K; ++y) {\n      matrix[y].fill(this._0, 0, delta);\n      copy(A[y], matrix[y], delta, 0, end);\n    }\n\n    for (const ops = this.ops; delta > 0; --delta) {\n      const term = matrix[0][delta];\n      for (let y = 1; y < K; ++y) {\n        matrix[y - 1][delta - 1] = ops.minus(matrix[y][delta], term);\n      }\n      matrix[K - 1][delta - 1] = term;\n    }\n\n    return matrix;\n  }\n\n  square(A: Matrix<T>): Matrix<T> {\n    return this.times(A, A);\n  }\n\n  times(A: Matrix<T>, B: Matrix<T>): Matrix<T> {\n    return matrixMult(A, B, this.ops, this._0);\n  }\n\n  toValue(data: Matrix<T>, delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return data[0][x];\n    }\n    tryNumTerms(K, terms);\n    let val = this._0;\n    const minY = K - terms.length;\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], data[y][x]);\n      val = this.ops.plus(val, temp);\n    }\n    return val;\n  }\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { tryNumTerms } from \"../../../utils/try\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\nexport class RevSumEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.RevSum;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._1);\n    for (let i = K - 2; i > 0; --i) {\n      mat[i - 1] = this.ops.plus(mat[i], mat[i]);\n    }\n    for (let i = 1; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._neg1);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[Math.max(0, K - 2)] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    return new Array<T>(K).fill(this._1);\n  }\n\n  genZero(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  get(A: T[], y: number, x: number): T {\n    const K = A.length - ++x;\n\n    let value: T;\n    if (y < x) {\n      value = A[K + y];\n    } else {\n      const z = y - x;\n      value = A[z - 1] ?? this._0;\n      value = this.ops.minus(A[z], value);\n      value = this.ops.plus(A[z], value);\n    }\n\n    return this.ops.minus(value, A[K - 1] ?? this._0);\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    const B = new Array<T>(K);\n    for (let y = 0; y < K; ++y) {\n      B[y] = this.get(A, y, x);\n    }\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    const K = A.length;\n    if (K !== B.length) {\n      throw new DimensionError(K, B.length);\n    }\n\n    const C = new Array<T>(K);\n    for (let m = 0; m < K; ++m) {\n      let value = this._0;\n      for (let n = 0; n < K; ++n) {\n        const temp = this.ops.times(this.get(A, m, n), B[n]);\n        value = this.ops.plus(value, temp);\n      }\n      C[m] = value;\n    }\n\n    return C;\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return this.get(data, 0, x);\n    }\n    tryNumTerms(K, terms);\n    let value = this._0;\n    const minY = K - terms.length;\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], this.get(data, y, x));\n      value = this.ops.plus(value, temp);\n    }\n    return value;\n  }\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { tryNumTerms } from \"../../../utils/try\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\nexport class SumEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.Sum;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K);\n    if (K < 1) {\n      return mat;\n    }\n    mat[0] = this._1;\n    for (let i = 1; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i - 1], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._2);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 1) {\n      mat[0] = this._neg1;\n    } else if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genZero(K: number): T[] {\n    return new Array<T>(K).fill(this._1);\n  }\n\n  get(A: T[], y: number, x: number): T {\n    if (y < x) {\n      return this.ops.minus(A[x], A[x - 1 - y]);\n    }\n    if (y === x) {\n      return A[x];\n    }\n    const z = A.length - 1 - y + x;\n    let res = this.ops.plus(A[z], A[z]);\n    res = this.ops.minus(A[z + 1], res);\n    res = this.ops.plus(res, A[x]);\n    return res;\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n    const K = A.length - 1;\n    const x = K + 1 + delta;\n    if (x <= 0 || x > K) {\n      throw new OutOfBoundsError(delta, -K, 0, \"delta\");\n    }\n    const util = this.ops;\n    const B = new Array<T>(K + 1);\n    const v = util.times(this._2, this.get(A, 0, x));\n    for (let y = 0; y <= K; ++y) {\n      B[y] = util.minus(v, this.get(A, K - y, x));\n    }\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    const K = A.length;\n    if (K !== B.length) {\n      throw new DimensionError(K, B.length);\n    }\n\n    const C = new Array<T>(K);\n    for (let m = 0; m < K; ++m) {\n      let val = this._0;\n      for (let n = 0; n < K; ++n) {\n        const temp = this.ops.times(this.get(A, m, n), this.get(B, n, m));\n        val = this.ops.plus(val, temp);\n      }\n      C[m] = val;\n    }\n    return C;\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return this.get(data, 0, x);\n    }\n    tryNumTerms(K, terms);\n    let val = this._0;\n    const minY = K - terms.length;\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], this.get(data, y, x));\n      val = this.ops.plus(val, temp);\n    }\n    return val;\n  }\n}\n","import { initMatrix, matrixMult } from \"../../../utils/matrix\";\nimport { Matrix } from \"../../../type/matrix\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\nimport { Ops } from \"../../../ops/ops\";\nimport { getSum } from \"../../../utils/array\";\nimport { tryNumTerms } from \"../../../utils/try\";\n\nexport class TermEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.Term;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._1);\n    for (let i = 2; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i - 1], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K >= 2) {\n      mat[0] = this._2;\n      mat[K - 1] = this._neg1;\n    } else if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[0] = this._neg1;\n      mat[Math.min(1, K - 1)] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genZero(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    delta = -delta;\n    const B = Array.from(A);\n    B.copyWithin(delta, 0);\n\n    let sum = getSum(A, this.ops) ?? this._0;\n    for (let i = K - 1; delta > 0; --i) {\n      let newValue = this.ops.plus(A[i], A[i]);\n      newValue = this.ops.minus(newValue, sum);\n      B[--delta] = newValue;\n      sum = A[i];\n    }\n\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    return matrixMult([A], toMatrix(B, this.ops), this.ops)[0];\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return data[x];\n    }\n    tryNumTerms(K, terms);\n    let value = this._0;\n    const minY = K - terms.length;\n    const mat = toMatrix(data, this.ops);\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], mat[y][x]);\n      value = this.ops.plus(value, temp);\n    }\n    return value;\n  }\n}\n\nfunction toMatrix<T>(arr: T[], ops: Ops<T>): Matrix<T> {\n  const N = arr.length;\n  const mat = initMatrix<T>(N);\n\n  if (N < 1) {\n    return mat;\n  }\n\n  mat[N - 1] = arr.slice(1);\n  for (let y = N - 2; y > 0; --y) {\n    for (let x = 0; x < y; ++x) {\n      mat[y][x] = ops.minus(mat[y + 1][x + 1], arr[x + 1]);\n    }\n  }\n\n  mat[0] = Array.from(arr);\n  for (let y = 1; y < N; ++y) {\n    for (let x = y; x < N; ++x) {\n      mat[y][x] = ops.plus(mat[y - 1][x - 1], arr[x]);\n    }\n  }\n\n  return mat;\n}\n","import { Ops } from \"./ops\";\n\nexport class BigOps implements Ops<bigint> {\n  cast(a: bigint | boolean | number | string): bigint {\n    return BigInt(a);\n  }\n  dividedBy(a: bigint, b: bigint): bigint {\n    return a / b;\n  }\n  equal(a: bigint, b: bigint): boolean {\n    return a == b;\n  }\n  half(a: bigint): bigint {\n    return a >> 1n;\n  }\n  isOdd(a: bigint): boolean {\n    return (a & 1n) === 1n;\n  }\n  larger(a: bigint, b: bigint): boolean {\n    return a > b;\n  }\n  largerEq(a: bigint, b: bigint): boolean {\n    return a >= b;\n  }\n  minus(a: bigint, b: bigint): bigint {\n    return a - b;\n  }\n  minus1(a: bigint): bigint {\n    return a - 1n;\n  }\n  mod(a: bigint, b: bigint): bigint {\n    return a % b;\n  }\n  negative(a: bigint): bigint {\n    return -a;\n  }\n  plus(a: bigint, b: bigint): bigint {\n    return a + b;\n  }\n  plus1(a: bigint): bigint {\n    return a + 1n;\n  }\n  sign(a: bigint): number {\n    return a < 0n ? -1 : +(a > 0n);\n  }\n  smaller(a: bigint, b: bigint): boolean {\n    return a < b;\n  }\n  smallerEq(a: bigint, b: bigint): boolean {\n    return a <= b;\n  }\n  square(a: bigint): bigint {\n    return a ** 2n;\n  }\n  times(a: bigint, b: bigint): bigint {\n    return a * b;\n  }\n  toNumber(a: bigint): number {\n    return Number(a);\n  }\n  trunc(a: bigint): bigint {\n    return a;\n  }\n}\n","import { Ops } from \"./ops\";\n\nexport class NumOps implements Ops<number> {\n  cast(a: unknown): number {\n    return Number(a);\n  }\n  dividedBy(a: number, b: number): number {\n    return a / b;\n  }\n  equal(a: number, b: number): boolean {\n    return a == b;\n  }\n  half(a: number): number {\n    return a * 0.5;\n  }\n  isOdd(a: number): boolean {\n    return (a & 1) === 1;\n  }\n  larger(a: number, b: number): boolean {\n    return a > b;\n  }\n  largerEq(a: number, b: number): boolean {\n    return a >= b;\n  }\n  minus(a: number, b: number): number {\n    return a - b;\n  }\n  minus1(a: number): number {\n    return a - 1;\n  }\n  mod(a: number, b: number): number {\n    return a % b;\n  }\n  negative(a: number): number {\n    return -a;\n  }\n  plus(a: number, b: number): number {\n    return a + b;\n  }\n  plus1(a: number): number {\n    return a + 1;\n  }\n  sign(a: number): number {\n    return a < 0 ? -1 : +(a > 0);\n  }\n  smaller(a: number, b: number): boolean {\n    return a < b;\n  }\n  smallerEq(a: number, b: number): boolean {\n    return a <= b;\n  }\n  square(a: number): number {\n    return a ** 2;\n  }\n  times(a: number, b: number): number {\n    return a * b;\n  }\n  toNumber(a: number): number {\n    return a;\n  }\n  trunc(a: number): number {\n    return Math.trunc(a);\n  }\n}\n","import { trySafe } from \"../utils/try\";\nimport { Ops } from \"./ops\";\n\nexport class SafeNumOps implements Ops<number> {\n  cast(a: unknown): number {\n    return trySafe(Number(a));\n  }\n  dividedBy(a: number, b: number): number {\n    return trySafe(a / b);\n  }\n  equal(a: number, b: number): boolean {\n    return a == b;\n  }\n  half(a: number): number {\n    return a * 0.5;\n  }\n  isOdd(a: number): boolean {\n    return (a & 1) === 1;\n  }\n  larger(a: number, b: number): boolean {\n    return a > b;\n  }\n  largerEq(a: number, b: number): boolean {\n    return a >= b;\n  }\n  minus(a: number, b: number): number {\n    return trySafe(a - b);\n  }\n  minus1(a: number): number {\n    return trySafe(a - 1);\n  }\n  mod(a: number, b: number): number {\n    return a % b;\n  }\n  negative(a: number): number {\n    return trySafe(-a);\n  }\n  plus(a: number, b: number): number {\n    return trySafe(a + b);\n  }\n  plus1(a: number): number {\n    return trySafe(a + 1);\n  }\n  sign(a: number): number {\n    return a < 0n ? -1 : +(a > 0n);\n  }\n  smaller(a: number, b: number): boolean {\n    return a < b;\n  }\n  smallerEq(a: number, b: number): boolean {\n    return a <= b;\n  }\n  square(a: number): number {\n    return trySafe(a ** 2);\n  }\n  times(a: number, b: number): number {\n    return trySafe(a * b);\n  }\n  toNumber(a: number): number {\n    return a;\n  }\n  trunc(a: number): number {\n    return Math.trunc(a);\n  }\n}\n","import { BigOps } from \"../../ops/bigOps\";\nimport { SumEncoding } from \"../encoding/sum/sumEncoding\";\nimport { Generator } from \"../gen/generator\";\nimport { PowerGen } from \"../gen/powerGen\";\n\nexport class BigKbonacci implements Generator<bigint, bigint> {\n  private customs: bigint[];\n  private gen: PowerGen<bigint, bigint>;\n\n  constructor(K: number, customs?: bigint[], cached = true) {\n    const ops = new BigOps();\n    const encoding = new SumEncoding(ops);\n    this.customs = customs ?? [];\n    this.gen = new PowerGen(K, { cached, customs, encoding, ops });\n  }\n\n  get K(): number {\n    return this.gen.K;\n  }\n\n  get(index: bigint): bigint {\n    return this.gen.get(index);\n  }\n\n  getCached(): boolean {\n    return this.gen.getCached();\n  }\n\n  getCustoms(): bigint[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.gen.setCached(value);\n  }\n}\n","import { BigKbonacci } from \"./bigKbonacci\";\n\nexport class BigFibonacci extends BigKbonacci {\n  constructor(customs?: bigint[], cached?: boolean) {\n    super(2, customs, cached);\n  }\n}\n","import { BigKbonacci } from \"./bigKbonacci\";\n\nexport class BigTribonacci extends BigKbonacci {\n  constructor(customs?: bigint[], cached?: boolean) {\n    super(3, customs, cached);\n  }\n}\n","import { SafeNumOps } from \"../../ops/safeNumOps\";\nimport { Generator } from \"../gen/generator\";\nimport { SumEncoding } from \"../encoding/sum/sumEncoding\";\nimport { PowerGen } from \"../gen/powerGen\";\n\nexport class Kbonacci implements Generator<number, number> {\n  private customs: number[];\n  private gen: PowerGen<number, number>;\n\n  constructor(K: number, customs?: number[], cached = true) {\n    const ops = new SafeNumOps();\n    const encoding = new SumEncoding(ops);\n    this.customs = customs ?? [];\n    this.gen = new PowerGen(K, { cached, customs, encoding, ops });\n  }\n\n  get K(): number {\n    return this.gen.K;\n  }\n\n  get(index: number): number {\n    return this.gen.get(index);\n  }\n\n  getCached(): boolean {\n    return this.gen.getCached();\n  }\n\n  getCustoms(): number[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.gen.setCached(value);\n  }\n}\n","import { Kbonacci } from \"./kbonacci\";\n\nexport class Fibonacci extends Kbonacci {\n  constructor(customs?: number[], cached?: boolean) {\n    super(2, customs, cached);\n  }\n}\n","import { Kbonacci } from \"./kbonacci\";\n\nexport class Tribonacci extends Kbonacci {\n  constructor(customs?: number[], cached?: boolean) {\n    super(3, customs, cached);\n  }\n}\n"],"names":["index"],"mappings":"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"}