{"version":3,"file":"nacci.min.mjs","sources":["../../src/error/dimensionError.ts","../../src/error/integerError.ts","../../src/error/outOfBoundsError.ts","../../src/globals.ts","../../src/error/unsafeError.ts","../../src/utils/is.ts","../../src/utils/try.ts","../../src/utils/powers.ts","../../src/kbonacci/gen/kPowerGen.ts","../../src/kbonacci/gen/powerGen.ts","../../src/utils/array.ts","../../src/kbonacci/gen/slidingWindowGen.ts","../../src/utils/matrix.ts","../../src/kbonacci/encoding/encoding.ts","../../src/kbonacci/encoding/matrix/matrixEncoding.ts","../../src/kbonacci/encoding/revSum/revSumEncoding.ts","../../src/kbonacci/encoding/sum/sumEncoding.ts","../../src/kbonacci/encoding/term/termEncoding.ts","../../src/ops/bigOps.ts","../../src/ops/numOps.ts","../../src/ops/safeNumOps.ts","../../src/kbonacci/wrapper/bigKbonacci.ts","../../src/kbonacci/wrapper/bigFibonacci.ts","../../src/kbonacci/wrapper/bigTribonacci.ts","../../src/kbonacci/wrapper/kbonacci.ts","../../src/kbonacci/wrapper/fibonacci.ts","../../src/kbonacci/wrapper/tribonacci.ts"],"sourcesContent":["export class DimensionError extends RangeError {\n  constructor(\n    actual: number | number[],\n    expected: number | number[],\n    relation = \"!=\"\n  ) {\n    const a = Array.isArray(actual) ? actual.join(\"x\") : `${actual}`;\n    const b = Array.isArray(expected) ? expected.join(\"x\") : `${expected}`;\n    super(`Dimension mismatch. ${a} ${relation} ${b}`);\n  }\n}\n","export class IntegerError extends TypeError {\n  constructor(value: unknown, label = \"Value\") {\n    super(`Not an integer. ${label}: ${String(value)}`);\n  }\n}\n","export class OutOfBoundsError extends RangeError {\n  constructor(\n    actual: unknown,\n    min?: unknown,\n    max?: unknown,\n    label = \"index\",\n    msg = \"Out of bounds\"\n  ) {\n    const message = [msg];\n    if (min != null || max != null) {\n      message.push(`. Expected`);\n      if (min != null) {\n        message.push(` ${String(min)} <=`);\n      }\n      message.push(` ${label}`);\n      if (max != null) {\n        message.push(` <= ${String(max)}`);\n      }\n    }\n    message.push(`. ${label}: ${String(actual)}`);\n    super(message.join(\"\"));\n  }\n}\n","export const K_MIN = 2;\nexport const SAFE_MAX = Number.MAX_SAFE_INTEGER;\nexport const SAFE_MIN = Number.MIN_SAFE_INTEGER;\n","import { SAFE_MAX, SAFE_MIN } from \"../globals\";\nimport { OutOfBoundsError } from \"./outOfBoundsError\";\n\nexport class UnsafeError extends OutOfBoundsError {\n  constructor(actual: number) {\n    super(actual, SAFE_MIN, SAFE_MAX, \"value\", \"Unsafe value\");\n  }\n}\n","import { SAFE_MIN, SAFE_MAX } from \"../globals\";\n\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\nexport function isInteger(value: unknown): value is number {\n  return Number.isInteger(value);\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\nexport function isSafeNumber(value: number): boolean {\n  return value >= SAFE_MIN && value <= SAFE_MAX;\n}\n","import { DimensionError } from \"../error/dimensionError\";\nimport { IntegerError } from \"../error/integerError\";\nimport { OutOfBoundsError } from \"../error/outOfBoundsError\";\nimport { UnsafeError } from \"../error/unsafeError\";\nimport { K_MIN } from \"../globals\";\nimport { isInteger, isSafeNumber } from \"./is\";\n\nexport function tryInteger<T>(n: T): T {\n  if (!isInteger(n)) {\n    throw new IntegerError(n);\n  }\n  return n;\n}\n\nexport function tryK(K: number): number {\n  if (!isInteger(K)) {\n    throw new IntegerError(K, \"K\");\n  }\n  if (K < K_MIN) {\n    throw new OutOfBoundsError(K, K_MIN, undefined, \"K\");\n  }\n  return K;\n}\n\nexport function tryNumTerms<T>(maxLen: number, terms: T[]): T[] {\n  if (terms.length > maxLen) {\n    throw new DimensionError(terms.length, maxLen, \"<=\");\n  }\n  return terms;\n}\n\nexport function trySafe(n: number): number {\n  if (!isSafeNumber(n)) {\n    throw new UnsafeError(n);\n  }\n  return n;\n}\n","import { OutOfBoundsError } from \"../error/outOfBoundsError\";\nexport interface KeyOps<T> {\n  cast(value: unknown): T;\n  equal(a: T, b: T): boolean;\n  half(a: T): T;\n  isOdd(a: T): boolean;\n  sign(a: T): number;\n  trunc(a: T): T;\n}\n\nexport interface ValueOps<T> {\n  times(a: T, b: T): T;\n  square(a: T): T;\n}\n\nexport class Powers<K, V> {\n  protected cached: boolean;\n  protected keyOps: KeyOps<K>;\n  protected valOps: ValueOps<V>;\n  protected pows: V[];\n\n  constructor(value: V, keyOps: KeyOps<K>, valOps: ValueOps<V>, cached = true) {\n    this.cached = cached;\n    this.keyOps = keyOps;\n    this.pows = [value];\n    this.valOps = valOps;\n  }\n\n  get size(): number {\n    return this.pows.length;\n  }\n\n  clear(): void {\n    this.pows.length = 1;\n  }\n\n  get(N: K): V {\n    const keyOps = this.keyOps;\n    const valOps = this.valOps;\n\n    const pows = this.cached ? this.pows : [this.pows[0]];\n    let value: V | undefined = undefined;\n\n    for (let i = 0; keyOps.sign(N) > 0; ++i) {\n      if (pows[i] == null) {\n        pows[i] = valOps.square(pows[i - 1]);\n      }\n      if (keyOps.isOdd(N)) {\n        if (value == null) {\n          value = pows[i];\n        } else {\n          value = valOps.times(value, pows[i]);\n        }\n      }\n      N = keyOps.trunc(keyOps.half(N));\n    }\n\n    if (value == null) {\n      throw new OutOfBoundsError(N, keyOps.cast(1));\n    }\n\n    return value;\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  setCached(cached: boolean): void {\n    this.cached = cached;\n    if (!cached) {\n      this.clear();\n    }\n  }\n\n  setValue(value: V): void {\n    if (value !== this.pows[0]) {\n      this.pows = [value];\n      this.clear();\n    }\n  }\n}\n","import { Generator } from \"./generator\";\nimport { Ops } from \"../../ops/ops\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Powers } from \"../../utils/powers\";\nimport { Encoding } from \"../encoding/encoding\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class KPowerGen<K, V> implements Generator<K, V> {\n  private cached: boolean;\n  private customs: V[];\n  private encoding: Encoding<V, unknown>;\n  private indexOps: Ops<K>;\n  private isStd: boolean;\n  private _K: number;\n  private neg: Powers<K, unknown>;\n  private pos: Powers<K, unknown>;\n  private v0: V;\n  private zero: unknown;\n\n  constructor(K: number, config: GenConfig<K, V, unknown>) {\n    tryK(K);\n\n    const cached = config.cached ?? true;\n    const customs = config.customs ?? [];\n    const encoding = config.encoding;\n    const indexOps = config.indexOps ?? config.ops;\n    if (encoding == null) {\n      throw new TypeError(`Missing encoding`);\n    }\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n\n    this.cached = cached;\n    this.customs = customs;\n    this.encoding = encoding;\n    this.indexOps = indexOps;\n    this.isStd = false;\n    this._K = K;\n    this.neg = new Powers(encoding.genNegK(K), indexOps, encoding, cached);\n    this.pos = new Powers(encoding.genK(K), indexOps, encoding, cached);\n    this.zero = encoding.genZero(K);\n    this.v0 = encoding.toValue(this.zero, 0);\n    this.setCustoms(customs);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    const iOps = this.indexOps;\n\n    const T = iOps.cast(this.customs.length - 1);\n    if (iOps.sign(N) >= 0 && iOps.smallerEq(N, T)) {\n      return this.customs[iOps.toNumber(N)];\n    }\n\n    let data: unknown;\n    let delta: K;\n\n    N = iOps.minus(N, T);\n    const K = iOps.cast(this.K);\n    if (iOps.sign(N) > 0) {\n      const mod = iOps.mod(iOps.minus1(N), K);\n      delta = iOps.minus1(K);\n      N = iOps.trunc(iOps.dividedBy(N, K));\n      N = iOps.equal(mod, delta) ? N : iOps.plus1(N);\n      delta = iOps.plus(iOps.negative(delta), mod);\n      data = this.pos.get(N);\n    } else if (iOps.larger(N, iOps.negative(K))) {\n      delta = N;\n      data = this.zero;\n    } else {\n      delta = iOps.mod(N, K);\n      N = iOps.negative(N);\n      N = iOps.trunc(iOps.dividedBy(N, K));\n      data = this.neg.get(N);\n    }\n\n    const customs = this.isStd ? undefined : this.customs;\n    return this.encoding.toValue(data, iOps.toNumber(delta), customs);\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  getCustoms(): V[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.cached = value;\n    this.neg.setCached(value);\n    this.pos.setCached(value);\n  }\n\n  setCustoms(customs?: V[]): void {\n    if (customs == null || customs.length < 1) {\n      this.isStd = true;\n      this.customs = [this.v0];\n    } else {\n      tryNumTerms(this.K, customs);\n      this.isStd = false;\n      this.customs = customs;\n    }\n  }\n}\n","import { Ops } from \"../../ops/ops\";\nimport { Generator } from \"./generator\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Powers } from \"../../utils/powers\";\nimport { Encoding } from \"../encoding/encoding\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class PowerGen<K, V> implements Generator<K, V> {\n  private cached: boolean;\n  private customs: V[];\n  private encoding: Encoding<V, unknown>;\n  private indexOps: Ops<K>;\n  private isStd: boolean;\n  private _K: number;\n  private neg: Powers<K, unknown>;\n  private pos: Powers<K, unknown>;\n  private v0: V;\n\n  constructor(K: number, config: GenConfig<K, V, unknown>) {\n    tryK(K);\n\n    const cached = config.cached ?? true;\n    const customs = config.customs ?? [];\n    const encoding = config.encoding;\n    const indexOps = config.indexOps ?? config.ops;\n    if (encoding == null) {\n      throw new TypeError(`Missing encoding`);\n    }\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n\n    this.cached = cached;\n    this.customs = [];\n    this.encoding = encoding;\n    this.indexOps = indexOps;\n    this.isStd = false;\n    this._K = K;\n    this.neg = new Powers(encoding.genNegOne(K), indexOps, encoding, cached);\n    const one = encoding.genOne(K);\n    this.pos = new Powers(one, indexOps, encoding, cached);\n    this.v0 = encoding.toValue(one, -1);\n    this.setCustoms(customs);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    const iOps = this.indexOps;\n\n    const T = iOps.cast(this.customs.length - 1);\n    if (iOps.sign(N) >= 0 && iOps.smallerEq(N, T)) {\n      return this.customs[iOps.toNumber(N)];\n    }\n\n    N = iOps.minus(N, T);\n    const data =\n      iOps.sign(N) > 0 ? this.pos.get(N) : this.neg.get(iOps.negative(N));\n\n    const customs = this.isStd ? undefined : this.customs;\n    return this.encoding.toValue(data, 0, customs);\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  getCustoms(): V[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.cached = value;\n    this.neg.setCached(value);\n    this.pos.setCached(value);\n  }\n\n  setCustoms(customs?: V[]): void {\n    if (customs == null || customs.length < 1) {\n      this.isStd = true;\n      this.customs = [this.v0];\n    } else {\n      tryNumTerms(this.K, customs);\n      this.isStd = false;\n      this.customs = customs;\n    }\n  }\n}\n","import { Ops } from \"../ops/ops\";\n\nexport function copy<T>(\n  A: T[],\n  B: T[],\n  target = 0,\n  start = 0,\n  end = A.length\n): T[] {\n  if (A === B) {\n    return A.copyWithin(target, start, end);\n  }\n  if (target < 0) {\n    target = Math.max(0, B.length + target);\n  }\n  if (start < 0) {\n    start = Math.max(0, A.length + start);\n  }\n  if (end < 0) {\n    end = Math.max(0, A.length + end);\n  }\n  end = start + Math.max(0, Math.min(B.length - target, end - start));\n  while (start < end) {\n    B[target++] = A[start++];\n  }\n  return B;\n}\n\nexport function getSum<T>(arr: T[], ops: Ops<T>): T | undefined {\n  const N = arr.length;\n  if (N < 1) {\n    return undefined;\n  }\n  let value = arr[0];\n  for (let i = 1; i < N; ++i) {\n    value = ops.plus(value, arr[i]);\n  }\n  return value;\n}\n\nexport function padStart<T>(\n  array: T[],\n  targetLength: number,\n  padValue: T\n): void {\n  if (targetLength <= array.length) {\n    return;\n  }\n  const N = array.length;\n  const i = targetLength - N;\n  array.length = targetLength;\n  array.fill(padValue, N, i);\n  array.copyWithin(i, 0, N);\n  array.fill(padValue, 0, Math.min(i, N));\n}\n","import { padStart } from \"../../utils/array\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Generator } from \"./generator\";\nimport { Ops } from \"../../ops/ops\";\nimport { getSum } from \"../../utils/array\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class SlidingWindowGen<K, V> implements Generator<K, V> {\n  private delta: number;\n  private indexOps: Ops<K>;\n  private _K: number;\n  private minN: K;\n  private next: V;\n  private valueOps: Ops<V>;\n  private values: V[];\n\n  constructor(K: number, config: GenConfig<K, V, never>) {\n    tryK(K);\n\n    let customs = config.customs ?? [];\n    const indexOps = config.indexOps ?? config.ops;\n    const valueOps = config.valueOps ?? config.ops;\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n    if (valueOps == null) {\n      throw new TypeError(`Missing value operations`);\n    }\n\n    const _0 = valueOps.cast(0);\n    if (customs == null || customs.length < 1) {\n      const _1 = valueOps.cast(1);\n      customs = [_0, _1];\n    } else {\n      tryNumTerms(K, customs);\n    }\n\n    // Initialize properties\n    this.delta = 0;\n    this.indexOps = indexOps;\n    this._K = K;\n    this.valueOps = valueOps;\n    this.minN = indexOps.minus(indexOps.cast(customs.length), indexOps.cast(K));\n    this.next = getSum(customs, valueOps) ?? _0;\n    this.values = Array.from(customs);\n    padStart(this.values, K, _0);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    // Shift window\n    const ops = this.indexOps;\n    if (ops.smaller(N, this.minN)) {\n      this.reverse(ops.minus(this.minN, N));\n    } else {\n      const maxN = ops.plus(this.minN, ops.cast(this.K));\n      if (ops.largerEq(N, maxN)) {\n        this.forward(ops.plus1(ops.minus(N, maxN)));\n      }\n    }\n\n    // Return value\n    const i = ops.plus(ops.minus(N, this.minN), ops.cast(this.delta));\n    return this.values[ops.toNumber(i) % this.K];\n  }\n\n  private forward(i: K): void {\n    const iOps = this.indexOps;\n    const vOps = this.valueOps;\n\n    while (iOps.sign(i) > 0) {\n      const temp = this.values[this.delta];\n      this.values[this.delta] = this.next;\n      this.next = vOps.plus(this.next, vOps.minus(this.next, temp));\n      this.delta = (this.delta + 1) % this.K;\n      this.minN = iOps.plus1(this.minN);\n      i = iOps.minus1(i);\n    }\n  }\n\n  private reverse(i: K): void {\n    const iOps = this.indexOps;\n    const vOps = this.valueOps;\n\n    while (iOps.sign(i) > 0) {\n      const delta = (this.delta - 1 + this.K) % this.K;\n      const value = this.values[delta];\n      const newValue = vOps.plus(vOps.minus(value, this.next), value);\n      this.minN = iOps.minus1(this.minN);\n      this.next = value;\n      this.delta = delta;\n      this.values[delta] = newValue;\n      i = iOps.minus1(i);\n    }\n  }\n}\n","import { DimensionError } from \"../error/dimensionError\";\nimport { Ops } from \"../ops/ops\";\nimport { Matrix } from \"../type/matrix\";\n\nexport function fillMatrix<T>(matrix: Matrix<T>, value: T): void {\n  const M = matrix.length;\n  for (let m = 0; m < M; ++m) {\n    matrix[m].fill(value);\n  }\n}\n\nexport function initMatrix<T>(Y: number, X = Y): Matrix<T> {\n  const matrix = new Array<T[]>(Y);\n  for (let i = 0; i < Y; ++i) {\n    matrix[i] = new Array<T>(X);\n  }\n  return matrix;\n}\n\nexport function matrixMult<T>(\n  A: Matrix<T>,\n  B: Matrix<T>,\n  ops: Ops<T>,\n  zero: T = ops.cast(0)\n): Matrix<T> {\n  const M = A.length;\n  const N = A[0]?.length ?? 0;\n  const P = B[0]?.length ?? 0;\n  if (N !== B.length) {\n    throw new DimensionError([M, N], [B.length, P]);\n  }\n\n  const C = initMatrix<T>(M, P);\n  for (let m = 0; m < M; ++m) {\n    for (let p = 0; p < P; ++p) {\n      let val = zero;\n      for (let n = 0; n < N; ++n) {\n        const temp = ops.times(A[m][n], B[n][p]);\n        val = ops.plus(val, temp);\n      }\n      C[m][p] = val;\n    }\n  }\n\n  return C;\n}\n","export const EncodingFormat = {\n  Matrix: \"mat\",\n  RevSum: \"rsum\",\n  Sum: \"sum\",\n  Term: \"term\",\n} as const;\n\nexport interface Encoding<V, D = unknown> {\n  readonly format: string;\n  genK(K: number): D;\n  genNegK(K: number): D;\n  genNegOne(K: number): D;\n  genOne(K: number): D;\n  genZero(K: number): D;\n  pow(A: D, n: V): D;\n  shift(A: D, delta: number): D;\n  square(A: D): D;\n  times(A: D, B: D): D;\n  toValue(data: D, delta?: number, customTerms?: V[]): V;\n}\n","import { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { copy } from \"../../../utils/array\";\nimport { initMatrix, matrixMult } from \"../../../utils/matrix\";\nimport { Matrix } from \"../../../type/matrix\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\nimport { tryNumTerms } from \"../../../utils/try\";\n\n/*\nK = 4\n    2c-b   2b-a  a-b-c-d [      d     c       b         a] z  2z-d 4z-2d-c\n         2c+b-a    b-c-d [  a-b-c   c+d     b+c       a+b]\n                     c-d [    b-c   a-b   b+c+d     a+b+c]\n                       d [      c     b       a   a+b+c+d]\n\nK = 5\n    2d-c   2c-b     2b-a a-b-c-d-e [      e     d     c       b         a] z  2z-e 4z-2e-d 8z-4e-2d-c\n         2d+c-b   2c+b-a   b-c-d-e [a-b-c-d   d+e   c+d     b+c       a+b]\n                2d+c+b-a     c-d-e [  b-c-d a-b-c c+d+e   b+c+d     a+b+c]\n                               d-e [    c-d   b-c   a-b b+c+d+e   a+b+c+d]\n                                 e [      d     c     b       a a+b+c+d+e]\n*/\nexport class MatrixEncoding<T> implements Encoding<T, Matrix<T>> {\n  public readonly format = EncodingFormat.Matrix;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n\n    // Populate first row\n    let value = this._0;\n    const ops = this.ops;\n    matrix[0][0] = this._1;\n    for (let x = 1; x <= K; ++x) {\n      value = ops.plus(value, matrix[0][x - 1]);\n      matrix[0][x] = value;\n    }\n\n    // Populate subsequent rows\n    for (let y = 1; y <= K; ++y) {\n      matrix[y][0] = this._1;\n      for (let x = 1; x <= K; ++x) {\n        matrix[y][x] = ops.plus(matrix[y - 1][x - 1], matrix[0][x]);\n      }\n    }\n\n    return matrix;\n  }\n\n  genNegK(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    matrix[0][0] = this._2;\n    matrix[0].fill(this._0, 1, K);\n    matrix[0][K] = this._neg1;\n    for (let i = 1; i <= K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i - 1] = this._neg1;\n      matrix[i][i] = this._2;\n      matrix[i][K] = this._neg1;\n    }\n    matrix[K][K] = this._1;\n    return matrix;\n  }\n\n  genNegOne(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    for (let i = 0; i < K; ++i) {\n      matrix[i][0] = this._neg1;\n      matrix[i].fill(this._0, 1);\n      matrix[i][i + 1] = this._1;\n    }\n    matrix[K][0] = this._1;\n    matrix[K].fill(this._0, 1);\n    return matrix;\n  }\n\n  genOne(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    matrix[0].fill(this._0);\n    matrix[0][K] = this._1;\n    for (let i = 1; i <= K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i - 1] = this._1;\n      matrix[i][K] = this._1;\n    }\n    return matrix;\n  }\n\n  genZero(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    for (let i = 0; i < K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i] = this._1;\n    }\n    return matrix;\n  }\n\n  /*\n  get(A: Matrix<T>, y: number, x: number): T {\n    return A[y][x];\n  }\n  */\n\n  pow(A: Matrix<T>, n: T): Matrix<T> {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: Matrix<T> | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: Matrix<T>, delta: number): Matrix<T> {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    if (delta <= -K || delta > 0) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    delta = -delta;\n    const end = K - delta;\n    const matrix = initMatrix<T>(K);\n    for (let y = 0; y < K; ++y) {\n      matrix[y].fill(this._0, 0, delta);\n      copy(A[y], matrix[y], delta, 0, end);\n    }\n\n    for (const ops = this.ops; delta > 0; --delta) {\n      const term = matrix[0][delta];\n      for (let y = 1; y < K; ++y) {\n        matrix[y - 1][delta - 1] = ops.minus(matrix[y][delta], term);\n      }\n      matrix[K - 1][delta - 1] = term;\n    }\n\n    return matrix;\n  }\n\n  square(A: Matrix<T>): Matrix<T> {\n    return this.times(A, A);\n  }\n\n  times(A: Matrix<T>, B: Matrix<T>): Matrix<T> {\n    return matrixMult(A, B, this.ops, this._0);\n  }\n\n  toValue(data: Matrix<T>, delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return data[0][x];\n    }\n    tryNumTerms(K, terms);\n    let val = this._0;\n    const minY = K - terms.length;\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], data[y][x]);\n      val = this.ops.plus(val, temp);\n    }\n    return val;\n  }\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { tryNumTerms } from \"../../../utils/try\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\nexport class RevSumEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.RevSum;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._1);\n    for (let i = K - 2; i > 0; --i) {\n      mat[i - 1] = this.ops.plus(mat[i], mat[i]);\n    }\n    for (let i = 1; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._neg1);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[Math.max(0, K - 2)] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    return new Array<T>(K).fill(this._1);\n  }\n\n  genZero(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  get(A: T[], y: number, x: number): T {\n    const K = A.length - ++x;\n\n    let value: T;\n    if (y < x) {\n      value = A[K + y];\n    } else {\n      const z = y - x;\n      value = A[z - 1] ?? this._0;\n      value = this.ops.minus(A[z], value);\n      value = this.ops.plus(A[z], value);\n    }\n\n    return this.ops.minus(value, A[K - 1] ?? this._0);\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    const B = new Array<T>(K);\n    for (let y = 0; y < K; ++y) {\n      B[y] = this.get(A, y, x);\n    }\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    const K = A.length;\n    if (K !== B.length) {\n      throw new DimensionError(K, B.length);\n    }\n\n    const C = new Array<T>(K);\n    for (let m = 0; m < K; ++m) {\n      let value = this._0;\n      for (let n = 0; n < K; ++n) {\n        const temp = this.ops.times(this.get(A, m, n), B[n]);\n        value = this.ops.plus(value, temp);\n      }\n      C[m] = value;\n    }\n\n    return C;\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return this.get(data, 0, x);\n    }\n    tryNumTerms(K, terms);\n    let value = this._0;\n    const minY = K - terms.length;\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], this.get(data, y, x));\n      value = this.ops.plus(value, temp);\n    }\n    return value;\n  }\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { tryNumTerms } from \"../../../utils/try\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\nexport class SumEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.Sum;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K);\n    if (K < 1) {\n      return mat;\n    }\n    mat[0] = this._1;\n    for (let i = 1; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i - 1], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._2);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 1) {\n      mat[0] = this._neg1;\n    } else if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genZero(K: number): T[] {\n    return new Array<T>(K).fill(this._1);\n  }\n\n  get(A: T[], y: number, x: number): T {\n    if (y < x) {\n      return this.ops.minus(A[x], A[x - 1 - y]);\n    }\n    if (y === x) {\n      return A[x];\n    }\n    const z = A.length - 1 - y + x;\n    let res = this.ops.plus(A[z], A[z]);\n    res = this.ops.minus(A[z + 1], res);\n    res = this.ops.plus(res, A[x]);\n    return res;\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n    const K = A.length - 1;\n    const x = K + 1 + delta;\n    if (x <= 0 || x > K) {\n      throw new OutOfBoundsError(delta, -K, 0, \"delta\");\n    }\n    const util = this.ops;\n    const B = new Array<T>(K + 1);\n    const v = util.times(this._2, this.get(A, 0, x));\n    for (let y = 0; y <= K; ++y) {\n      B[y] = util.minus(v, this.get(A, K - y, x));\n    }\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    const K = A.length;\n    if (K !== B.length) {\n      throw new DimensionError(K, B.length);\n    }\n\n    const C = new Array<T>(K);\n    for (let m = 0; m < K; ++m) {\n      let val = this._0;\n      for (let n = 0; n < K; ++n) {\n        const temp = this.ops.times(this.get(A, m, n), this.get(B, n, m));\n        val = this.ops.plus(val, temp);\n      }\n      C[m] = val;\n    }\n    return C;\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return this.get(data, 0, x);\n    }\n    tryNumTerms(K, terms);\n    let val = this._0;\n    const minY = K - terms.length;\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], this.get(data, y, x));\n      val = this.ops.plus(val, temp);\n    }\n    return val;\n  }\n}\n","import { initMatrix, matrixMult } from \"../../../utils/matrix\";\nimport { Matrix } from \"../../../type/matrix\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\nimport { Ops } from \"../../../ops/ops\";\nimport { getSum } from \"../../../utils/array\";\nimport { tryNumTerms } from \"../../../utils/try\";\n\nexport class TermEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.Term;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._1);\n    for (let i = 2; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i - 1], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K >= 2) {\n      mat[0] = this._2;\n      mat[K - 1] = this._neg1;\n    } else if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[0] = this._neg1;\n      mat[Math.min(1, K - 1)] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genZero(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    delta = -delta;\n    const B = Array.from(A);\n    B.copyWithin(delta, 0);\n\n    let sum = getSum(A, this.ops) ?? this._0;\n    for (let i = K - 1; delta > 0; --i) {\n      let newValue = this.ops.plus(A[i], A[i]);\n      newValue = this.ops.minus(newValue, sum);\n      B[--delta] = newValue;\n      sum = A[i];\n    }\n\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    return matrixMult([A], toMatrix(B, this.ops), this.ops)[0];\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return data[x];\n    }\n    tryNumTerms(K, terms);\n    let value = this._0;\n    const minY = K - terms.length;\n    const mat = toMatrix(data, this.ops);\n    for (let y = minY; y < K; ++y) {\n      const temp = this.ops.times(terms[y - minY], mat[y][x]);\n      value = this.ops.plus(value, temp);\n    }\n    return value;\n  }\n}\n\nfunction toMatrix<T>(arr: T[], ops: Ops<T>): Matrix<T> {\n  const N = arr.length;\n  const mat = initMatrix<T>(N);\n\n  if (N < 1) {\n    return mat;\n  }\n\n  mat[N - 1] = arr.slice(1);\n  for (let y = N - 2; y > 0; --y) {\n    for (let x = 0; x < y; ++x) {\n      mat[y][x] = ops.minus(mat[y + 1][x + 1], arr[x + 1]);\n    }\n  }\n\n  mat[0] = Array.from(arr);\n  for (let y = 1; y < N; ++y) {\n    for (let x = y; x < N; ++x) {\n      mat[y][x] = ops.plus(mat[y - 1][x - 1], arr[x]);\n    }\n  }\n\n  return mat;\n}\n","import { Ops } from \"./ops\";\n\nexport class BigOps implements Ops<bigint> {\n  cast(a: bigint | boolean | number | string): bigint {\n    return BigInt(a);\n  }\n  dividedBy(a: bigint, b: bigint): bigint {\n    return a / b;\n  }\n  equal(a: bigint, b: bigint): boolean {\n    return a == b;\n  }\n  half(a: bigint): bigint {\n    return a >> 1n;\n  }\n  isOdd(a: bigint): boolean {\n    return (a & 1n) === 1n;\n  }\n  larger(a: bigint, b: bigint): boolean {\n    return a > b;\n  }\n  largerEq(a: bigint, b: bigint): boolean {\n    return a >= b;\n  }\n  minus(a: bigint, b: bigint): bigint {\n    return a - b;\n  }\n  minus1(a: bigint): bigint {\n    return a - 1n;\n  }\n  mod(a: bigint, b: bigint): bigint {\n    return a % b;\n  }\n  negative(a: bigint): bigint {\n    return -a;\n  }\n  plus(a: bigint, b: bigint): bigint {\n    return a + b;\n  }\n  plus1(a: bigint): bigint {\n    return a + 1n;\n  }\n  sign(a: bigint): number {\n    return a < 0n ? -1 : +(a > 0n);\n  }\n  smaller(a: bigint, b: bigint): boolean {\n    return a < b;\n  }\n  smallerEq(a: bigint, b: bigint): boolean {\n    return a <= b;\n  }\n  square(a: bigint): bigint {\n    return a ** 2n;\n  }\n  times(a: bigint, b: bigint): bigint {\n    return a * b;\n  }\n  toNumber(a: bigint): number {\n    return Number(a);\n  }\n  trunc(a: bigint): bigint {\n    return a;\n  }\n}\n","import { Ops } from \"./ops\";\n\nexport class NumOps implements Ops<number> {\n  cast(a: unknown): number {\n    return Number(a);\n  }\n  dividedBy(a: number, b: number): number {\n    return a / b;\n  }\n  equal(a: number, b: number): boolean {\n    return a == b;\n  }\n  half(a: number): number {\n    return a * 0.5;\n  }\n  isOdd(a: number): boolean {\n    return (a & 1) === 1;\n  }\n  larger(a: number, b: number): boolean {\n    return a > b;\n  }\n  largerEq(a: number, b: number): boolean {\n    return a >= b;\n  }\n  minus(a: number, b: number): number {\n    return a - b;\n  }\n  minus1(a: number): number {\n    return a - 1;\n  }\n  mod(a: number, b: number): number {\n    return a % b;\n  }\n  negative(a: number): number {\n    return -a;\n  }\n  plus(a: number, b: number): number {\n    return a + b;\n  }\n  plus1(a: number): number {\n    return a + 1;\n  }\n  sign(a: number): number {\n    return a < 0 ? -1 : +(a > 0);\n  }\n  smaller(a: number, b: number): boolean {\n    return a < b;\n  }\n  smallerEq(a: number, b: number): boolean {\n    return a <= b;\n  }\n  square(a: number): number {\n    return a ** 2;\n  }\n  times(a: number, b: number): number {\n    return a * b;\n  }\n  toNumber(a: number): number {\n    return a;\n  }\n  trunc(a: number): number {\n    return Math.trunc(a);\n  }\n}\n","import { trySafe } from \"../utils/try\";\nimport { Ops } from \"./ops\";\n\nexport class SafeNumOps implements Ops<number> {\n  cast(a: unknown): number {\n    return trySafe(Number(a));\n  }\n  dividedBy(a: number, b: number): number {\n    return trySafe(a / b);\n  }\n  equal(a: number, b: number): boolean {\n    return a == b;\n  }\n  half(a: number): number {\n    return a * 0.5;\n  }\n  isOdd(a: number): boolean {\n    return (a & 1) === 1;\n  }\n  larger(a: number, b: number): boolean {\n    return a > b;\n  }\n  largerEq(a: number, b: number): boolean {\n    return a >= b;\n  }\n  minus(a: number, b: number): number {\n    return trySafe(a - b);\n  }\n  minus1(a: number): number {\n    return trySafe(a - 1);\n  }\n  mod(a: number, b: number): number {\n    return a % b;\n  }\n  negative(a: number): number {\n    return trySafe(-a);\n  }\n  plus(a: number, b: number): number {\n    return trySafe(a + b);\n  }\n  plus1(a: number): number {\n    return trySafe(a + 1);\n  }\n  sign(a: number): number {\n    return a < 0n ? -1 : +(a > 0n);\n  }\n  smaller(a: number, b: number): boolean {\n    return a < b;\n  }\n  smallerEq(a: number, b: number): boolean {\n    return a <= b;\n  }\n  square(a: number): number {\n    return trySafe(a ** 2);\n  }\n  times(a: number, b: number): number {\n    return trySafe(a * b);\n  }\n  toNumber(a: number): number {\n    return a;\n  }\n  trunc(a: number): number {\n    return Math.trunc(a);\n  }\n}\n","import { BigOps } from \"../../ops/bigOps\";\nimport { SumEncoding } from \"../encoding\";\nimport { Generator } from \"../gen\";\nimport { KPowerGen } from \"../gen/kPowerGen\";\n\nexport class BigKbonacci implements Generator<bigint, bigint> {\n  private customs: bigint[];\n  private gen: KPowerGen<bigint, bigint>;\n\n  constructor(K: number, customs?: bigint[], cached = true) {\n    const ops = new BigOps();\n    const encoding = new SumEncoding(ops);\n    this.customs = customs ?? [];\n    this.gen = new KPowerGen(K, { cached, customs, encoding, ops });\n  }\n\n  get K(): number {\n    return this.gen.K;\n  }\n\n  get(index: bigint): bigint {\n    return this.gen.get(index);\n  }\n\n  getCached(): boolean {\n    return this.gen.getCached();\n  }\n\n  getCustoms(): bigint[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.gen.setCached(value);\n  }\n}\n","import { BigKbonacci } from \"./bigKbonacci\";\n\nexport class BigFibonacci extends BigKbonacci {\n  constructor(customs?: bigint[], cached?: boolean) {\n    super(2, customs, cached);\n  }\n}\n","import { BigKbonacci } from \"./bigKbonacci\";\n\nexport class BigTribonacci extends BigKbonacci {\n  constructor(customs?: bigint[], cached?: boolean) {\n    super(3, customs, cached);\n  }\n}\n","import { SafeNumOps } from \"../../ops\";\nimport { Generator } from \"../gen/generator\";\nimport { SumEncoding } from \"../encoding\";\nimport { KPowerGen } from \"../gen\";\n\nexport class Kbonacci implements Generator<number, number> {\n  private customs: number[];\n  private gen: KPowerGen<number, number>;\n\n  constructor(K: number, customs?: number[], cached = true) {\n    const ops = new SafeNumOps();\n    const encoding = new SumEncoding(ops);\n    this.customs = customs ?? [];\n    this.gen = new KPowerGen(K, { cached, customs, encoding, ops });\n  }\n\n  get K(): number {\n    return this.gen.K;\n  }\n\n  get(index: number): number {\n    return this.gen.get(index);\n  }\n\n  getCached(): boolean {\n    return this.gen.getCached();\n  }\n\n  getCustoms(): number[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.gen.setCached(value);\n  }\n}\n","import { Kbonacci } from \"./kbonacci\";\n\nexport class Fibonacci extends Kbonacci {\n  constructor(customs?: number[], cached?: boolean) {\n    super(2, customs, cached);\n  }\n}\n","import { Kbonacci } from \"./kbonacci\";\n\nexport class Tribonacci extends Kbonacci {\n  constructor(customs?: number[], cached?: boolean) {\n    super(3, customs, cached);\n  }\n}\n"],"names":["DimensionError","actual","expected","relation","a","b","IntegerError","value","label","OutOfBoundsError","min","max","msg","message","K_MIN","SAFE_MAX","SAFE_MIN","UnsafeError","isInteger","isSafeNumber","tryK","K","tryNumTerms","maxLen","terms","trySafe","n","Powers","keyOps","valOps","cached","__publicField","N","pows","i","KPowerGen","config","customs","encoding","indexOps","iOps","T","data","delta","mod","PowerGen","one","copy","A","B","target","start","end","getSum","arr","ops","padStart","array","targetLength","padValue","SlidingWindowGen","valueOps","_0","_1","maxN","vOps","temp","newValue","initMatrix","Y","X","matrix","matrixMult","zero","_a","_b","M","P","C","m","p","val","EncodingFormat","MatrixEncoding","x","y","rem","term","minY","RevSumEncoding","mat","z","SumEncoding","res","util","v","TermEncoding","sum","toMatrix","BigOps","NumOps","SafeNumOps","BigKbonacci","index","BigFibonacci","BigTribonacci","Kbonacci","Fibonacci","Tribonacci"],"mappings":"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"}