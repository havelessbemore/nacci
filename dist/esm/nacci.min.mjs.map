{"version":3,"file":"nacci.min.mjs","sources":["../../src/utils/array.ts","../../src/error/dimensionError.ts","../../src/error/integerError.ts","../../src/error/outOfBoundsError.ts","../../src/globals.ts","../../src/error/unsafeError.ts","../../src/utils/is.ts","../../src/utils/try.ts","../../src/utils/powers.ts","../../src/kbonacci/gen/kPowerGen.ts","../../src/kbonacci/gen/powerGen.ts","../../src/kbonacci/gen/slidingWindowGen.ts","../../src/utils/matrix.ts","../../src/kbonacci/encoding/encoding.ts","../../src/kbonacci/encoding/matrix/matrixEncoding.ts","../../src/kbonacci/encoding/revSum/revSumEncoding.ts","../../src/kbonacci/encoding/sum/sumEncoding.ts","../../src/kbonacci/encoding/term/termEncoding.ts","../../src/ops/bigOps.ts","../../src/ops/numOps.ts","../../src/ops/safeNumOps.ts","../../src/kbonacci/wrapper/bigKbonacci.ts","../../src/kbonacci/wrapper/bigFibonacci.ts","../../src/kbonacci/wrapper/bigTribonacci.ts","../../src/kbonacci/wrapper/kbonacci.ts","../../src/kbonacci/wrapper/fibonacci.ts","../../src/kbonacci/wrapper/tribonacci.ts"],"sourcesContent":["import { Ops } from \"../ops/ops\";\n\nexport function copy<T>(\n  A: T[],\n  B: T[],\n  target = 0,\n  start = 0,\n  end = A.length\n): T[] {\n  if (A === B) {\n    return A.copyWithin(target, start, end);\n  }\n  if (target < 0) {\n    target = Math.max(0, B.length + target);\n  }\n  if (start < 0) {\n    start = Math.max(0, A.length + start);\n  }\n  if (end < 0) {\n    end = Math.max(0, A.length + end);\n  }\n  end = start + Math.max(0, Math.min(B.length - target, end - start));\n  while (start < end) {\n    B[target++] = A[start++];\n  }\n  return B;\n}\n\nexport function getSum<T>(arr: T[], ops: Ops<T>): T | undefined {\n  const N = arr.length;\n  if (N < 1) {\n    return undefined;\n  }\n  let value = arr[0];\n  for (let i = 1; i < N; ++i) {\n    value = ops.plus(value, arr[i]);\n  }\n  return value;\n}\n\nexport function padStart<T>(\n  array: T[],\n  targetLength: number,\n  padValue: T\n): void {\n  if (targetLength <= array.length) {\n    return;\n  }\n  const N = array.length;\n  const i = targetLength - N;\n  array.length = targetLength;\n  array.fill(padValue, N, i);\n  array.copyWithin(i, 0, N);\n  array.fill(padValue, 0, Math.min(i, N));\n}\n","export class DimensionError extends RangeError {\n  constructor(\n    actual: number | number[],\n    expected: number | number[],\n    relation = \"!=\"\n  ) {\n    const a = Array.isArray(actual) ? actual.join(\"x\") : `${actual}`;\n    const b = Array.isArray(expected) ? expected.join(\"x\") : `${expected}`;\n    super(`Dimension mismatch. ${a} ${relation} ${b}`);\n  }\n}\n","export class IntegerError extends TypeError {\n  constructor(value: unknown, label = \"Value\") {\n    super(`Not an integer. ${label}: ${String(value)}`);\n  }\n}\n","export class OutOfBoundsError extends RangeError {\n  constructor(\n    actual: unknown,\n    min?: unknown,\n    max?: unknown,\n    label = \"index\",\n    msg = \"Out of bounds\"\n  ) {\n    const message = [msg];\n    if (min != null || max != null) {\n      message.push(`. Expected`);\n      if (min != null) {\n        message.push(` ${String(min)} <=`);\n      }\n      message.push(` ${label}`);\n      if (max != null) {\n        message.push(` <= ${String(max)}`);\n      }\n    }\n    message.push(`. ${label}: ${String(actual)}`);\n    super(message.join(\"\"));\n  }\n}\n","export const K_MIN = 2;\nexport const SAFE_MAX = Number.MAX_SAFE_INTEGER;\nexport const SAFE_MIN = Number.MIN_SAFE_INTEGER;\n","import { SAFE_MAX, SAFE_MIN } from \"../globals\";\nimport { OutOfBoundsError } from \"./outOfBoundsError\";\n\nexport class UnsafeError extends OutOfBoundsError {\n  constructor(actual: number) {\n    super(actual, SAFE_MIN, SAFE_MAX, \"value\", \"Unsafe value\");\n  }\n}\n","import { SAFE_MIN, SAFE_MAX } from \"../globals\";\n\nexport function isBigInt(value: unknown): value is bigint {\n  return typeof value === \"bigint\";\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\nexport function isInteger(value: unknown): value is number {\n  return Number.isInteger(value);\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\nexport function isSafeNumber(value: number): boolean {\n  return value >= SAFE_MIN && value <= SAFE_MAX;\n}\n","import { DimensionError } from \"../error/dimensionError\";\nimport { IntegerError } from \"../error/integerError\";\nimport { OutOfBoundsError } from \"../error/outOfBoundsError\";\nimport { UnsafeError } from \"../error/unsafeError\";\nimport { K_MIN } from \"../globals\";\nimport { isInteger, isSafeNumber } from \"./is\";\n\nexport function tryInteger<T>(n: T): T {\n  if (!isInteger(n)) {\n    throw new IntegerError(n);\n  }\n  return n;\n}\n\nexport function tryK(K: number): number {\n  if (!isInteger(K)) {\n    throw new IntegerError(K, \"K\");\n  }\n  if (K < K_MIN) {\n    throw new OutOfBoundsError(K, K_MIN, undefined, \"K\");\n  }\n  return K;\n}\n\nexport function tryNumTerms<T>(maxLen: number, terms: T[]): T[] {\n  if (terms.length > maxLen) {\n    throw new DimensionError(terms.length, maxLen, \"<=\");\n  }\n  return terms;\n}\n\nexport function trySafe(n: number): number {\n  if (!isSafeNumber(n)) {\n    throw new UnsafeError(n);\n  }\n  return n;\n}\n","import { OutOfBoundsError } from \"../error/outOfBoundsError\";\nexport interface KeyOps<T> {\n  cast(value: unknown): T;\n  equal(a: T, b: T): boolean;\n  half(a: T): T;\n  isOdd(a: T): boolean;\n  sign(a: T): number;\n  trunc(a: T): T;\n}\n\nexport interface ValueOps<T> {\n  times(a: T, b: T): T;\n  square(a: T): T;\n}\n\nexport class Powers<K, V> {\n  protected cached: boolean;\n  protected keyOps: KeyOps<K>;\n  protected valOps: ValueOps<V>;\n  protected pows: V[];\n\n  constructor(value: V, keyOps: KeyOps<K>, valOps: ValueOps<V>, cached = true) {\n    this.cached = cached;\n    this.keyOps = keyOps;\n    this.pows = [value];\n    this.valOps = valOps;\n  }\n\n  get size(): number {\n    return this.pows.length;\n  }\n\n  clear(): void {\n    this.pows.length = 1;\n  }\n\n  get(N: K): V {\n    const keyOps = this.keyOps;\n    const valOps = this.valOps;\n\n    const pows = this.cached ? this.pows : [this.pows[0]];\n    let value: V | undefined = undefined;\n\n    for (let i = 0; keyOps.sign(N) > 0; ++i) {\n      if (pows[i] == null) {\n        pows[i] = valOps.square(pows[i - 1]);\n      }\n      if (keyOps.isOdd(N)) {\n        if (value == null) {\n          value = pows[i];\n        } else {\n          value = valOps.times(value, pows[i]);\n        }\n      }\n      N = keyOps.trunc(keyOps.half(N));\n    }\n\n    if (value == null) {\n      throw new OutOfBoundsError(N, keyOps.cast(1));\n    }\n\n    return value;\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  setCached(cached: boolean): void {\n    this.cached = cached;\n    if (!cached) {\n      this.clear();\n    }\n  }\n\n  setValue(value: V): void {\n    if (value !== this.pows[0]) {\n      this.pows = [value];\n      this.clear();\n    }\n  }\n}\n","import { Generator } from \"./generator\";\nimport { Ops } from \"../../ops/ops\";\nimport { getSum } from \"../../utils/array\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Powers } from \"../../utils/powers\";\nimport { Encoding } from \"../encoding/encoding\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class KPowerGen<K, V> implements Generator<K, V> {\n  private cached: boolean;\n  private customs: V[];\n  private encoding: Encoding<V, unknown>;\n  private indexOps: Ops<K>;\n  private isStd: boolean;\n  private _K: number;\n  private neg: Powers<K, unknown>;\n  private pos: Powers<K, unknown>;\n  private v0: V;\n  private valueOps: Ops<V>;\n  private zero: unknown;\n\n  constructor(K: number, config: GenConfig<K, V, unknown>) {\n    tryK(K);\n\n    const cached = config.cached ?? true;\n    const customs = config.customs ?? [];\n    const encoding = config.encoding;\n    const indexOps = config.indexOps ?? config.ops;\n    const valueOps = config.valueOps ?? config.ops;\n    if (encoding == null) {\n      throw new TypeError(`Missing encoding`);\n    }\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n    if (valueOps == null) {\n      throw new TypeError(`Missing value operations`);\n    }\n\n    this.cached = cached;\n    this.customs = customs;\n    this.encoding = encoding;\n    this.indexOps = indexOps;\n    this.isStd = false;\n    this._K = K;\n    this.neg = new Powers(encoding.genNegK(K), indexOps, encoding, cached);\n    this.pos = new Powers(encoding.genK(K), indexOps, encoding, cached);\n    this.zero = encoding.genZero(K);\n    this.v0 = encoding.toValue(this.zero, 0);\n    this.valueOps = valueOps;\n    this.setCustoms(customs);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    const iOps = this.indexOps;\n\n    const T = iOps.cast(this.customs.length - 1);\n    if (iOps.sign(N) >= 0 && iOps.smallerEq(N, T)) {\n      return this.customs[iOps.toNumber(N)];\n    }\n\n    let data: unknown;\n    let delta: K;\n\n    N = iOps.minus(N, T);\n    const K = iOps.cast(this.K);\n    if (iOps.sign(N) > 0) {\n      const mod = iOps.mod(iOps.minus1(N), K);\n      delta = iOps.minus1(K);\n      N = iOps.trunc(iOps.dividedBy(N, K));\n      N = iOps.equal(mod, delta) ? N : iOps.plus1(N);\n      delta = iOps.plus(iOps.negative(delta), mod);\n      data = this.pos.get(N);\n    } else if (iOps.larger(N, iOps.negative(K))) {\n      delta = N;\n      data = this.zero;\n    } else {\n      delta = iOps.mod(N, K);\n      N = iOps.negative(N);\n      N = iOps.trunc(iOps.dividedBy(N, K));\n      data = this.neg.get(N);\n    }\n\n    const customs = this.isStd ? undefined : this.customs;\n    return this.encoding.toValue(data, iOps.toNumber(delta), customs);\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  getCustoms(): V[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.cached = value;\n    this.neg.setCached(value);\n    this.pos.setCached(value);\n  }\n\n  setCustoms(customs?: V[]): void {\n    const vOps = this.valueOps;\n    if (customs == null || customs.length < 1) {\n      this.isStd = true;\n      this.customs = [this.v0];\n      return;\n    }\n    const K = this.K;\n    this.isStd = false;\n    tryNumTerms(K, customs);\n    customs = Array.from(customs);\n    if (customs.length < K) {\n      let value: V = getSum(customs, vOps)!;\n      for (let i = K - customs.length; i > 0; --i) {\n        customs.push(value);\n        value = vOps.plus(value, value);\n      }\n    }\n    this.customs = customs;\n  }\n}\n","import { Ops } from \"../../ops/ops\";\nimport { getSum } from \"../../utils/array\";\nimport { Generator } from \"./generator\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Powers } from \"../../utils/powers\";\nimport { Encoding } from \"../encoding/encoding\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class PowerGen<K, V> implements Generator<K, V> {\n  private cached: boolean;\n  private customs: V[];\n  private encoding: Encoding<V, unknown>;\n  private indexOps: Ops<K>;\n  private isStd: boolean;\n  private _K: number;\n  private neg: Powers<K, unknown>;\n  private pos: Powers<K, unknown>;\n  private v0: V;\n  private valueOps: Ops<V>;\n\n  constructor(K: number, config: GenConfig<K, V, unknown>) {\n    tryK(K);\n\n    const cached = config.cached ?? true;\n    const customs = config.customs ?? [];\n    const encoding = config.encoding;\n    const indexOps = config.indexOps ?? config.ops;\n    const valueOps = config.valueOps ?? config.ops;\n    if (encoding == null) {\n      throw new TypeError(`Missing encoding`);\n    }\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n    if (valueOps == null) {\n      throw new TypeError(`Missing value operations`);\n    }\n\n    this.cached = cached;\n    this.customs = [];\n    this.encoding = encoding;\n    this.indexOps = indexOps;\n    this.isStd = false;\n    this._K = K;\n    this.neg = new Powers(encoding.genNegOne(K), indexOps, encoding, cached);\n    const one = encoding.genOne(K);\n    this.pos = new Powers(one, indexOps, encoding, cached);\n    this.v0 = encoding.toValue(one, -1);\n    this.valueOps = valueOps;\n    this.setCustoms(customs);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    const iOps = this.indexOps;\n\n    const T = iOps.cast(this.customs.length - 1);\n    if (iOps.sign(N) >= 0 && iOps.smallerEq(N, T)) {\n      return this.customs[iOps.toNumber(N)];\n    }\n\n    N = iOps.minus(N, T);\n    const data =\n      iOps.sign(N) > 0 ? this.pos.get(N) : this.neg.get(iOps.negative(N));\n\n    const customs = this.isStd ? undefined : this.customs;\n    return this.encoding.toValue(data, 0, customs);\n  }\n\n  getCached(): boolean {\n    return this.cached;\n  }\n\n  getCustoms(): V[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.cached = value;\n    this.neg.setCached(value);\n    this.pos.setCached(value);\n  }\n\n  setCustoms(customs?: V[]): void {\n    const vOps = this.valueOps;\n    if (customs == null || customs.length < 1) {\n      this.isStd = true;\n      this.customs = [this.v0];\n      return;\n    }\n    const K = this.K;\n    this.isStd = false;\n    tryNumTerms(K, customs);\n    customs = Array.from(customs);\n    if (customs.length < K) {\n      let value: V = getSum(customs, vOps)!;\n      for (let i = K - customs.length; i > 0; --i) {\n        customs.push(value);\n        value = vOps.plus(value, value);\n      }\n    }\n    this.customs = customs;\n  }\n}\n","import { padStart } from \"../../utils/array\";\nimport { tryK, tryNumTerms } from \"../../utils/try\";\nimport { Generator } from \"./generator\";\nimport { Ops } from \"../../ops/ops\";\nimport { getSum } from \"../../utils/array\";\nimport { GenConfig } from \"./genConfig\";\n\nexport class SlidingWindowGen<K, V> implements Generator<K, V> {\n  private delta: number;\n  private indexOps: Ops<K>;\n  private _K: number;\n  private minN: K;\n  private next: V;\n  private valueOps: Ops<V>;\n  private values: V[];\n\n  constructor(K: number, config: GenConfig<K, V, never>) {\n    tryK(K);\n\n    let customs = config.customs ?? [];\n    const indexOps = config.indexOps ?? config.ops;\n    const valueOps = config.valueOps ?? config.ops;\n    if (indexOps == null) {\n      throw new TypeError(`Missing index operations`);\n    }\n    if (valueOps == null) {\n      throw new TypeError(`Missing value operations`);\n    }\n\n    const _0 = valueOps.cast(0);\n    if (customs == null || customs.length < 1) {\n      const _1 = valueOps.cast(1);\n      customs = [_0, _1];\n    } else {\n      tryNumTerms(K, customs);\n    }\n\n    // Initialize properties\n    this.delta = 0;\n    this.indexOps = indexOps;\n    this._K = K;\n    this.valueOps = valueOps;\n    this.minN = indexOps.minus(indexOps.cast(customs.length), indexOps.cast(K));\n    this.next = getSum(customs, valueOps) ?? _0;\n    this.values = Array.from(customs);\n    padStart(this.values, K, _0);\n  }\n\n  get K(): number {\n    return this._K;\n  }\n\n  get(N: K): V {\n    // Shift window\n    const ops = this.indexOps;\n    if (ops.smaller(N, this.minN)) {\n      this.reverse(ops.minus(this.minN, N));\n    } else {\n      const maxN = ops.plus(this.minN, ops.cast(this.K));\n      if (ops.largerEq(N, maxN)) {\n        this.forward(ops.plus1(ops.minus(N, maxN)));\n      }\n    }\n\n    // Return value\n    const i = ops.plus(ops.minus(N, this.minN), ops.cast(this.delta));\n    return this.values[ops.toNumber(i) % this.K];\n  }\n\n  private forward(i: K): void {\n    const iOps = this.indexOps;\n    const vOps = this.valueOps;\n\n    while (iOps.sign(i) > 0) {\n      const temp = this.values[this.delta];\n      this.values[this.delta] = this.next;\n      this.next = vOps.plus(this.next, vOps.minus(this.next, temp));\n      this.delta = (this.delta + 1) % this.K;\n      this.minN = iOps.plus1(this.minN);\n      i = iOps.minus1(i);\n    }\n  }\n\n  private reverse(i: K): void {\n    const iOps = this.indexOps;\n    const vOps = this.valueOps;\n\n    while (iOps.sign(i) > 0) {\n      const delta = (this.delta - 1 + this.K) % this.K;\n      const value = this.values[delta];\n      const newValue = vOps.plus(vOps.minus(value, this.next), value);\n      this.minN = iOps.minus1(this.minN);\n      this.next = value;\n      this.delta = delta;\n      this.values[delta] = newValue;\n      i = iOps.minus1(i);\n    }\n  }\n}\n","import { DimensionError } from \"../error/dimensionError\";\nimport { Ops } from \"../ops/ops\";\nimport { Matrix } from \"../type/matrix\";\n\nexport function fillMatrix<T>(matrix: Matrix<T>, value: T): void {\n  const M = matrix.length;\n  for (let m = 0; m < M; ++m) {\n    matrix[m].fill(value);\n  }\n}\n\nexport function initMatrix<T>(Y: number, X = Y): Matrix<T> {\n  const matrix = new Array<T[]>(Y);\n  for (let i = 0; i < Y; ++i) {\n    matrix[i] = new Array<T>(X);\n  }\n  return matrix;\n}\n\nexport function matrixMult<T>(\n  A: Matrix<T>,\n  B: Matrix<T>,\n  ops: Ops<T>,\n  zero: T = ops.cast(0)\n): Matrix<T> {\n  const M = A.length;\n  const N = A[0]?.length ?? 0;\n  const P = B[0]?.length ?? 0;\n  if (N !== B.length) {\n    throw new DimensionError([M, N], [B.length, P]);\n  }\n\n  const C = initMatrix<T>(M, P);\n  for (let m = 0; m < M; ++m) {\n    for (let p = 0; p < P; ++p) {\n      let val = zero;\n      for (let n = 0; n < N; ++n) {\n        const temp = ops.times(A[m][n], B[n][p]);\n        val = ops.plus(val, temp);\n      }\n      C[m][p] = val;\n    }\n  }\n\n  return C;\n}\n","export const EncodingFormat = {\n  Matrix: \"mat\",\n  RevSum: \"rsum\",\n  Sum: \"sum\",\n  Term: \"term\",\n} as const;\n\nexport interface Encoding<V, D = unknown> {\n  readonly format: string;\n  genK(K: number): D;\n  genNegK(K: number): D;\n  genNegOne(K: number): D;\n  genOne(K: number): D;\n  genZero(K: number): D;\n  pow(A: D, n: V): D;\n  shift(A: D, delta: number): D;\n  square(A: D): D;\n  times(A: D, B: D): D;\n  toValue(data: D, delta?: number, customTerms?: V[]): V;\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { copy } from \"../../../utils/array\";\nimport { initMatrix, matrixMult } from \"../../../utils/matrix\";\nimport { Matrix } from \"../../../type/matrix\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\n/*\nK = 4\n    2c-b   2b-a  a-b-c-d [      d     c       b         a] z  2z-d 4z-2d-c\n         2c+b-a    b-c-d [  a-b-c   c+d     b+c       a+b]\n                     c-d [    b-c   a-b   b+c+d     a+b+c]\n                       d [      c     b       a   a+b+c+d]\n\nK = 5\n    2d-c   2c-b     2b-a a-b-c-d-e [      e     d     c       b         a] z  2z-e 4z-2e-d 8z-4e-2d-c\n         2d+c-b   2c+b-a   b-c-d-e [a-b-c-d   d+e   c+d     b+c       a+b]\n                2d+c+b-a     c-d-e [  b-c-d a-b-c c+d+e   b+c+d     a+b+c]\n                               d-e [    c-d   b-c   a-b b+c+d+e   a+b+c+d]\n                                 e [      d     c     b       a a+b+c+d+e]\n*/\nexport class MatrixEncoding<T> implements Encoding<T, Matrix<T>> {\n  public readonly format = EncodingFormat.Matrix;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n\n    // Populate first row\n    let value = this._0;\n    const ops = this.ops;\n    matrix[0][0] = this._1;\n    for (let x = 1; x <= K; ++x) {\n      value = ops.plus(value, matrix[0][x - 1]);\n      matrix[0][x] = value;\n    }\n\n    // Populate subsequent rows\n    for (let y = 1; y <= K; ++y) {\n      matrix[y][0] = this._1;\n      for (let x = 1; x <= K; ++x) {\n        matrix[y][x] = ops.plus(matrix[y - 1][x - 1], matrix[0][x]);\n      }\n    }\n\n    return matrix;\n  }\n\n  genNegK(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    matrix[0][0] = this._2;\n    matrix[0].fill(this._0, 1, K);\n    matrix[0][K] = this._neg1;\n    for (let i = 1; i <= K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i - 1] = this._neg1;\n      matrix[i][i] = this._2;\n      matrix[i][K] = this._neg1;\n    }\n    matrix[K][K] = this._1;\n    return matrix;\n  }\n\n  genNegOne(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    for (let i = 0; i < K; ++i) {\n      matrix[i][0] = this._neg1;\n      matrix[i].fill(this._0, 1);\n      matrix[i][i + 1] = this._1;\n    }\n    matrix[K][0] = this._1;\n    matrix[K].fill(this._0, 1);\n    return matrix;\n  }\n\n  genOne(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    if (--K < 0) {\n      return matrix;\n    }\n    matrix[0].fill(this._0);\n    matrix[0][K] = this._1;\n    for (let i = 1; i <= K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i - 1] = this._1;\n      matrix[i][K] = this._1;\n    }\n    return matrix;\n  }\n\n  genZero(K: number): Matrix<T> {\n    const matrix = initMatrix<T>(K);\n    for (let i = 0; i < K; ++i) {\n      matrix[i].fill(this._0);\n      matrix[i][i] = this._1;\n    }\n    return matrix;\n  }\n\n  /*\n  get(A: Matrix<T>, y: number, x: number): T {\n    return A[y][x];\n  }\n  */\n\n  pow(A: Matrix<T>, n: T): Matrix<T> {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: Matrix<T> | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: Matrix<T>, delta: number): Matrix<T> {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    if (delta <= -K || delta > 0) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    delta = -delta;\n    const end = K - delta;\n    const matrix = initMatrix<T>(K);\n    for (let y = 0; y < K; ++y) {\n      matrix[y].fill(this._0, 0, delta);\n      copy(A[y], matrix[y], delta, 0, end);\n    }\n\n    for (const ops = this.ops; delta > 0; --delta) {\n      const term = matrix[0][delta];\n      for (let y = 1; y < K; ++y) {\n        matrix[y - 1][delta - 1] = ops.minus(matrix[y][delta], term);\n      }\n      matrix[K - 1][delta - 1] = term;\n    }\n\n    return matrix;\n  }\n\n  square(A: Matrix<T>): Matrix<T> {\n    return this.times(A, A);\n  }\n\n  times(A: Matrix<T>, B: Matrix<T>): Matrix<T> {\n    return matrixMult(A, B, this.ops, this._0);\n  }\n\n  toValue(data: Matrix<T>, delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return data[0][x];\n    }\n    if (terms.length !== K) {\n      throw new DimensionError(K, terms.length);\n    }\n    let val = this._0;\n    for (let y = 0; y < K; ++y) {\n      const temp = this.ops.times(terms[y], data[y][x]);\n      val = this.ops.plus(val, temp);\n    }\n    return val;\n  }\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\nexport class RevSumEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.RevSum;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._1);\n    for (let i = K - 2; i > 0; --i) {\n      mat[i - 1] = this.ops.plus(mat[i], mat[i]);\n    }\n    for (let i = 1; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._neg1);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[Math.max(0, K - 2)] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    return new Array<T>(K).fill(this._1);\n  }\n\n  genZero(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  get(A: T[], y: number, x: number): T {\n    const K = A.length - ++x;\n\n    let value: T;\n    if (y < x) {\n      value = A[K + y];\n    } else {\n      const z = y - x;\n      value = A[z - 1] ?? this._0;\n      value = this.ops.minus(A[z], value);\n      value = this.ops.plus(A[z], value);\n    }\n\n    return this.ops.minus(value, A[K - 1] ?? this._0);\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    const B = new Array<T>(K);\n    for (let y = 0; y < K; ++y) {\n      B[y] = this.get(A, y, x);\n    }\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    const K = A.length;\n    if (K !== B.length) {\n      throw new DimensionError(K, B.length);\n    }\n\n    const C = new Array<T>(K);\n    for (let m = 0; m < K; ++m) {\n      let value = this._0;\n      for (let n = 0; n < K; ++n) {\n        const temp = this.ops.times(this.get(A, m, n), B[n]);\n        value = this.ops.plus(value, temp);\n      }\n      C[m] = value;\n    }\n\n    return C;\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return this.get(data, 0, x);\n    }\n    if (terms.length !== K) {\n      throw new DimensionError(K, terms.length);\n    }\n    let value = this._0;\n    for (let y = 0; y < K; ++y) {\n      const temp = this.ops.times(this.get(data, y, x), terms[y]);\n      value = this.ops.plus(value, temp);\n    }\n    return value;\n  }\n}\n","import { DimensionError } from \"../../../error/dimensionError\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { Ops } from \"../../../ops/ops\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\n\nexport class SumEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.Sum;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K);\n    if (K < 1) {\n      return mat;\n    }\n    mat[0] = this._1;\n    for (let i = 1; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i - 1], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._2);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 1) {\n      mat[0] = this._neg1;\n    } else if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genZero(K: number): T[] {\n    return new Array<T>(K).fill(this._1);\n  }\n\n  get(A: T[], y: number, x: number): T {\n    if (y < x) {\n      return this.ops.minus(A[x], A[x - 1 - y]);\n    }\n    if (y === x) {\n      return A[x];\n    }\n    const z = A.length - 1 - y + x;\n    let res = this.ops.plus(A[z], A[z]);\n    res = this.ops.minus(A[z + 1], res);\n    res = this.ops.plus(res, A[x]);\n    return res;\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n    const K = A.length - 1;\n    const x = K + 1 + delta;\n    if (x <= 0 || x > K) {\n      throw new OutOfBoundsError(delta, -K, 0, \"delta\");\n    }\n    const util = this.ops;\n    const B = new Array<T>(K + 1);\n    const v = util.times(this._2, this.get(A, 0, x));\n    for (let y = 0; y <= K; ++y) {\n      B[y] = util.minus(v, this.get(A, K - y, x));\n    }\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    const K = A.length;\n    if (K !== B.length) {\n      throw new DimensionError(K, B.length);\n    }\n\n    const C = new Array<T>(K);\n    for (let m = 0; m < K; ++m) {\n      let val = this._0;\n      for (let n = 0; n < K; ++n) {\n        const temp = this.ops.times(this.get(A, m, n), this.get(B, n, m));\n        val = this.ops.plus(val, temp);\n      }\n      C[m] = val;\n    }\n    return C;\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return this.get(data, 0, x);\n    }\n    if (terms.length !== K) {\n      throw new DimensionError(K, terms.length);\n    }\n    let val = this._0;\n    for (let y = 0; y < K; ++y) {\n      const temp = this.ops.times(terms[y], this.get(data, y, x));\n      val = this.ops.plus(val, temp);\n    }\n    return val;\n  }\n}\n","import { initMatrix, matrixMult } from \"../../../utils/matrix\";\nimport { Matrix } from \"../../../type/matrix\";\nimport { OutOfBoundsError } from \"../../../error/outOfBoundsError\";\nimport { DimensionError } from \"../../../error/dimensionError\";\nimport { EncodingFormat, Encoding } from \"../encoding\";\nimport { Ops } from \"../../../ops/ops\";\nimport { getSum } from \"../../../utils/array\";\n\nexport class TermEncoding<T> implements Encoding<T, T[]> {\n  public readonly format = EncodingFormat.Term;\n\n  private _neg1: T;\n  private _0: T;\n  private _1: T;\n  private _2: T;\n\n  constructor(private ops: Ops<T>) {\n    this._neg1 = ops.cast(-1);\n    this._0 = ops.cast(0);\n    this._1 = ops.cast(1);\n    this._2 = ops.cast(2);\n  }\n\n  genK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._1);\n    for (let i = 2; i < K; ++i) {\n      mat[i] = this.ops.plus(mat[i - 1], mat[i - 1]);\n    }\n    return mat;\n  }\n\n  genNegK(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K >= 2) {\n      mat[0] = this._2;\n      mat[K - 1] = this._neg1;\n    } else if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  genNegOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[0] = this._neg1;\n      mat[Math.min(1, K - 1)] = this._1;\n    }\n    return mat;\n  }\n\n  genOne(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[K - 1] = this._1;\n    }\n    return mat;\n  }\n\n  genZero(K: number): T[] {\n    const mat = new Array<T>(K).fill(this._0);\n    if (K > 0) {\n      mat[0] = this._1;\n    }\n    return mat;\n  }\n\n  pow(A: T[], n: T): T[] {\n    if (this.ops.smaller(n, this._1)) {\n      throw new OutOfBoundsError(n, this._1, undefined, \"N\");\n    }\n\n    let rem: T[] | undefined = undefined;\n    while (this.ops.larger(n, this._1)) {\n      if (this.ops.isOdd(n)) {\n        rem = rem == null ? A : this.times(rem, A);\n      }\n      A = this.times(A, A);\n      n = this.ops.half(n);\n      n = this.ops.trunc(n);\n    }\n\n    return rem == null ? A : this.times(rem, A);\n  }\n\n  shift(A: T[], delta: number): T[] {\n    if (delta === 0) {\n      return A;\n    }\n\n    const K = A.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n\n    delta = -delta;\n    const B = Array.from(A);\n    B.copyWithin(delta, 0);\n\n    let sum = getSum(A, this.ops) ?? this._0;\n    for (let i = K - 1; delta > 0; --i) {\n      let newValue = this.ops.plus(A[i], A[i]);\n      newValue = this.ops.minus(newValue, sum);\n      B[--delta] = newValue;\n      sum = A[i];\n    }\n\n    return B;\n  }\n\n  square(A: T[]): T[] {\n    return this.times(A, A);\n  }\n\n  times(A: T[], B: T[]): T[] {\n    return matrixMult([A], toMatrix(B, this.ops), this.ops)[0];\n  }\n\n  toValue(data: T[], delta = 0, terms?: T[]): T {\n    const K = data.length;\n    const x = K - 1 + delta;\n    if (x < 0 || x >= K) {\n      throw new OutOfBoundsError(delta, 1 - K, 0, \"delta\");\n    }\n    if (terms == null) {\n      return data[x];\n    }\n    if (terms.length !== K) {\n      throw new DimensionError(K, terms.length);\n    }\n    let value = this._0;\n    const mat = toMatrix(data, this.ops);\n    for (let y = 0; y < K; ++y) {\n      const temp = this.ops.times(terms[y], mat[y][x]);\n      value = this.ops.plus(value, temp);\n    }\n    return value;\n  }\n}\n\nfunction toMatrix<T>(arr: T[], ops: Ops<T>): Matrix<T> {\n  const N = arr.length;\n  const mat = initMatrix<T>(N);\n\n  if (N < 1) {\n    return mat;\n  }\n\n  mat[N - 1] = arr.slice(1);\n  for (let y = N - 2; y > 0; --y) {\n    for (let x = 0; x < y; ++x) {\n      mat[y][x] = ops.minus(mat[y + 1][x + 1], arr[x + 1]);\n    }\n  }\n\n  mat[0] = Array.from(arr);\n  for (let y = 1; y < N; ++y) {\n    for (let x = y; x < N; ++x) {\n      mat[y][x] = ops.plus(mat[y - 1][x - 1], arr[x]);\n    }\n  }\n\n  return mat;\n}\n","import { Ops } from \"./ops\";\n\nexport class BigOps implements Ops<bigint> {\n  cast(a: bigint | boolean | number | string): bigint {\n    return BigInt(a);\n  }\n  dividedBy(a: bigint, b: bigint): bigint {\n    return a / b;\n  }\n  equal(a: bigint, b: bigint): boolean {\n    return a == b;\n  }\n  half(a: bigint): bigint {\n    return a >> 1n;\n  }\n  isOdd(a: bigint): boolean {\n    return (a & 1n) === 1n;\n  }\n  larger(a: bigint, b: bigint): boolean {\n    return a > b;\n  }\n  largerEq(a: bigint, b: bigint): boolean {\n    return a >= b;\n  }\n  minus(a: bigint, b: bigint): bigint {\n    return a - b;\n  }\n  minus1(a: bigint): bigint {\n    return a - 1n;\n  }\n  mod(a: bigint, b: bigint): bigint {\n    return a % b;\n  }\n  negative(a: bigint): bigint {\n    return -a;\n  }\n  plus(a: bigint, b: bigint): bigint {\n    return a + b;\n  }\n  plus1(a: bigint): bigint {\n    return a + 1n;\n  }\n  sign(a: bigint): number {\n    return a < 0n ? -1 : +(a > 0n);\n  }\n  smaller(a: bigint, b: bigint): boolean {\n    return a < b;\n  }\n  smallerEq(a: bigint, b: bigint): boolean {\n    return a <= b;\n  }\n  square(a: bigint): bigint {\n    return a ** 2n;\n  }\n  times(a: bigint, b: bigint): bigint {\n    return a * b;\n  }\n  toNumber(a: bigint): number {\n    return Number(a);\n  }\n  trunc(a: bigint): bigint {\n    return a;\n  }\n}\n","import { Ops } from \"./ops\";\n\nexport class NumOps implements Ops<number> {\n  cast(a: unknown): number {\n    return Number(a);\n  }\n  dividedBy(a: number, b: number): number {\n    return a / b;\n  }\n  equal(a: number, b: number): boolean {\n    return a == b;\n  }\n  half(a: number): number {\n    return a * 0.5;\n  }\n  isOdd(a: number): boolean {\n    return (a & 1) === 1;\n  }\n  larger(a: number, b: number): boolean {\n    return a > b;\n  }\n  largerEq(a: number, b: number): boolean {\n    return a >= b;\n  }\n  minus(a: number, b: number): number {\n    return a - b;\n  }\n  minus1(a: number): number {\n    return a - 1;\n  }\n  mod(a: number, b: number): number {\n    return a % b;\n  }\n  negative(a: number): number {\n    return -a;\n  }\n  plus(a: number, b: number): number {\n    return a + b;\n  }\n  plus1(a: number): number {\n    return a + 1;\n  }\n  sign(a: number): number {\n    return a < 0 ? -1 : +(a > 0);\n  }\n  smaller(a: number, b: number): boolean {\n    return a < b;\n  }\n  smallerEq(a: number, b: number): boolean {\n    return a <= b;\n  }\n  square(a: number): number {\n    return a ** 2;\n  }\n  times(a: number, b: number): number {\n    return a * b;\n  }\n  toNumber(a: number): number {\n    return a;\n  }\n  trunc(a: number): number {\n    return Math.trunc(a);\n  }\n}\n","import { trySafe } from \"../utils/try\";\nimport { Ops } from \"./ops\";\n\nexport class SafeNumOps implements Ops<number> {\n  cast(a: unknown): number {\n    return trySafe(Number(a));\n  }\n  dividedBy(a: number, b: number): number {\n    return trySafe(a / b);\n  }\n  equal(a: number, b: number): boolean {\n    return a == b;\n  }\n  half(a: number): number {\n    return a * 0.5;\n  }\n  isOdd(a: number): boolean {\n    return (a & 1) === 1;\n  }\n  larger(a: number, b: number): boolean {\n    return a > b;\n  }\n  largerEq(a: number, b: number): boolean {\n    return a >= b;\n  }\n  minus(a: number, b: number): number {\n    return trySafe(a - b);\n  }\n  minus1(a: number): number {\n    return trySafe(a - 1);\n  }\n  mod(a: number, b: number): number {\n    return a % b;\n  }\n  negative(a: number): number {\n    return trySafe(-a);\n  }\n  plus(a: number, b: number): number {\n    return trySafe(a + b);\n  }\n  plus1(a: number): number {\n    return trySafe(a + 1);\n  }\n  sign(a: number): number {\n    return a < 0n ? -1 : +(a > 0n);\n  }\n  smaller(a: number, b: number): boolean {\n    return a < b;\n  }\n  smallerEq(a: number, b: number): boolean {\n    return a <= b;\n  }\n  square(a: number): number {\n    return trySafe(a ** 2);\n  }\n  times(a: number, b: number): number {\n    return trySafe(a * b);\n  }\n  toNumber(a: number): number {\n    return a;\n  }\n  trunc(a: number): number {\n    return Math.trunc(a);\n  }\n}\n","import { BigOps } from \"../../ops/bigOps\";\nimport { SumEncoding } from \"../encoding\";\nimport { Generator } from \"../gen\";\nimport { KPowerGen } from \"../gen/kPowerGen\";\n\nexport class BigKbonacci implements Generator<bigint, bigint> {\n  private customs: bigint[];\n  private gen: KPowerGen<bigint, bigint>;\n\n  constructor(K: number, customs?: bigint[], cached = true) {\n    const ops = new BigOps();\n    const encoding = new SumEncoding(ops);\n    this.customs = customs ?? [];\n    this.gen = new KPowerGen(K, { cached, customs, encoding, ops });\n  }\n\n  get K(): number {\n    return this.gen.K;\n  }\n\n  get(index: bigint): bigint {\n    return this.gen.get(index);\n  }\n\n  getCached(): boolean {\n    return this.gen.getCached();\n  }\n\n  getCustoms(): bigint[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.gen.setCached(value);\n  }\n}\n","import { BigKbonacci } from \"./bigKbonacci\";\n\nexport class BigFibonacci extends BigKbonacci {\n  constructor(customs?: bigint[], cached?: boolean) {\n    super(2, customs, cached);\n  }\n}\n","import { BigKbonacci } from \"./bigKbonacci\";\n\nexport class BigTribonacci extends BigKbonacci {\n  constructor(customs?: bigint[], cached?: boolean) {\n    super(3, customs, cached);\n  }\n}\n","import { SafeNumOps } from \"../../ops\";\nimport { Generator } from \"../gen/generator\";\nimport { SumEncoding } from \"../encoding\";\nimport { KPowerGen } from \"../gen\";\n\nexport class Kbonacci implements Generator<number, number> {\n  private customs: number[];\n  private gen: KPowerGen<number, number>;\n\n  constructor(K: number, customs?: number[], cached = true) {\n    const ops = new SafeNumOps();\n    const encoding = new SumEncoding(ops);\n    this.customs = customs ?? [];\n    this.gen = new KPowerGen(K, { cached, customs, encoding, ops });\n  }\n\n  get K(): number {\n    return this.gen.K;\n  }\n\n  get(index: number): number {\n    return this.gen.get(index);\n  }\n\n  getCached(): boolean {\n    return this.gen.getCached();\n  }\n\n  getCustoms(): number[] {\n    return this.customs;\n  }\n\n  setCached(value: boolean): void {\n    this.gen.setCached(value);\n  }\n}\n","import { Kbonacci } from \"./kbonacci\";\n\nexport class Fibonacci extends Kbonacci {\n  constructor(customs?: number[], cached?: boolean) {\n    super(2, customs, cached);\n  }\n}\n","import { Kbonacci } from \"./kbonacci\";\n\nexport class Tribonacci extends Kbonacci {\n  constructor(customs?: number[], cached?: boolean) {\n    super(3, customs, cached);\n  }\n}\n"],"names":["copy","A","B","target","start","end","getSum","arr","ops","N","value","i","padStart","array","targetLength","padValue","DimensionError","actual","expected","relation","a","b","IntegerError","label","OutOfBoundsError","min","max","msg","message","K_MIN","SAFE_MAX","SAFE_MIN","UnsafeError","isInteger","isSafeNumber","tryK","K","tryNumTerms","maxLen","terms","trySafe","n","Powers","keyOps","valOps","cached","__publicField","pows","KPowerGen","config","customs","encoding","indexOps","valueOps","iOps","T","data","delta","mod","vOps","PowerGen","one","SlidingWindowGen","_0","_1","maxN","temp","newValue","initMatrix","Y","X","matrix","matrixMult","zero","_a","_b","M","P","C","p","val","EncodingFormat","MatrixEncoding","x","y","rem","term","RevSumEncoding","mat","z","m","SumEncoding","res","util","v","TermEncoding","sum","toMatrix","BigOps","NumOps","SafeNumOps","BigKbonacci","index","BigFibonacci","BigTribonacci","Kbonacci","Fibonacci","Tribonacci"],"mappings":"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"}